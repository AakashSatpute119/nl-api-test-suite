{
	"info": {
		"_postman_id": "3395c8fc-f606-42d9-a513-ec3ae48a889c",
		"name": "NL API TEST SUITE (V1)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28511832",
		"_collection_link": "https://grey-moon-712773.postman.co/workspace/New-Team-Workspace~48687bdf-fda1-41eb-b19b-46d7890d40c7/collection/28228579-3395c8fc-f606-42d9-a513-ec3ae48a889c?action=share&source=collection_link&creator=28511832"
	},
	"item": [
		{
			"name": "Mentor Flow",
			"item": [
				{
					"name": "Auth V2",
					"item": [
						{
							"name": "Send OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// If response providerResponseCode==null",
											"",
											"if(pm.response.json().status.providerResponseCode==null)",
											"{",
											"    pm.test(\"Verify Response should be 201 OK\",function(){",
											"    pm.response.to.have.status(201);",
											"    });",
											"",
											"    pm.test(\"Verify provider is Gupshup\", function() {",
											"    pm.expect(pm.response.json().status.provider).to.exist;",
											"    pm.expect(pm.response.json().status.provider).to.eql(\"Gupshup\");",
											"     });",
											"",
											"    pm.test(\"Verify the Response body should contain the expected fields and values \",function(){",
											"    pm.response.to.have.jsonBody({",
											"        \"status\": {",
											"            \"provider\": \"Gupshup\",",
											"            \"phone\": \"7982057360\",",
											"            \"networkResponseCode\": 0,",
											"            \"messageID\": \"\",",
											"            \"error\": null,",
											"            \"providerResponseCode\": null,",
											"            \"providerSuccessResponse\": \"\",",
											"            \"status\": \"\"",
											"        }",
											"        });",
											"    });",
											"",
											"    pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"    });",
											"",
											"    pm.test(\"Provider field should not be empty\", function () {",
											"  const responseData = pm.response.json();",
											"    pm.expect(responseData.status.provider).to.exist.and.to.not.be.empty;",
											"    });",
											"",
											"    pm.test(\"NetworkResponseCode is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.networkResponseCode).to.be.a('number').and.to.satisfy((num) => num >= 0, \"NetworkResponseCode should be a non-negative integer\");",
											"     });",
											"    pm.test(\"MessageID is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.messageID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"MessageID should not be empty\");",
											"    });",
											"    pm.test(\"Error field should be either null or a non-empty string\", function () {",
											"     const responseData = pm.response.json();",
											"  ",
											"     pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.error).to.satisfy((error) => error === null || typeof error === 'string' && error.length > 0);",
											"     });",
											"",
											"}",
											"",
											"",
											"// If response providerResponseCode==null",
											"",
											"",
											"if(pm.response.json().status.providerResponseCode==308)",
											"{",
											"    pm.test(\"Verify Response should be 201 OK\",function(){",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"pm.test(\"Provider field should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.provider).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Network response code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.networkResponseCode).to.be.a('number');",
											"    pm.expect(responseData.status.networkResponseCode).to.be.at.least(0);",
											"});",
											"pm.test(\"Error object should have errorText and errorCode fields\", function () {",
											"    const responseData = pm.response.json().status;",
											"    pm.expect(responseData.error).to.exist;",
											"    pm.expect(responseData.error.errorText).to.exist;",
											"    pm.expect(responseData.error.errorCode).to.exist;",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/sendOTP?phone={{mentor_phone}}&errorMessage=Mobile%20number%20could%20not%20be%20verified.%20Please%20get%20in%20touch%20with%20the%20DC%20in%20your%20District%27s%20BSA%20office%20if%20your%20number%20is%20not%20registered%20on%20the%20Prerna%20Portal.",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{mentor_phone}}"
										},
										{
											"key": "errorMessage",
											"value": "Mobile%20number%20could%20not%20be%20verified.%20Please%20get%20in%20touch%20with%20the%20DC%20in%20your%20District%27s%20BSA%20office%20if%20your%20number%20is%20not%20registered%20on%20the%20Prerna%20Portal."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var jsonData = pm.response.json();",
											"// var extractedToken = jsonData.token;",
											"",
											"// // Set the environment variable",
											"// pm.environment.set(\"token\", jsonData.result.data.user.token);",
											"",
											"",
											"// using old auth for now",
											"",
											"",
											"",
											"pm.test(\"Verify Response should be 201 OK\", function(){",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\" Verify Response code is OK\", function() {",
											"    pm.expect(pm.response.json().responseCode).to.equal(\"OK\");",
											"});",
											"",
											"pm.test(\"Verify in Params exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().params).to.have.keys(\"responseMsgId\", \"msgId\", \"err\", \"status\", \"errMsg\");",
											"});",
											"",
											"pm.test(\"Verify ts property should exists\", function() {",
											"    pm.expect(pm.response.json().ts).to.exist;",
											"});",
											"",
											"pm.test(\"Verify ID property should be exist \", function() {",
											"    pm.expect(pm.response.json().id).to.exist;",
											"});",
											"",
											"pm.test(\" Verify result should be exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result).to.have.keys(\"responseMsg\",\"accountStatus\",\"data\");",
											"});",
											"",
											"pm.test(\" Verify Data exists and has the correct property\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.exist;",
											"});",
											"",
											"pm.test(\" Verify User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.have.keys(\"refreshToken\", \"refreshTokenId\", \"token\", \"tokenExpirationInstant\", \"user\");",
											"});",
											"",
											"pm.test(\"User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user).to.have.keys(",
											"                    \"active\",",
											"                    \"connectorId\",",
											"                    \"data\",",
											"                    \"fullName\",",
											"                    \"id\",",
											"                    \"insertInstant\",",
											"                    \"lastLoginInstant\",",
											"                    \"lastUpdateInstant\",",
											"                    \"memberships\",",
											"                    \"mobilePhone\",",
											"                    \"passwordChangeRequired\",",
											"                    \"passwordLastUpdateInstant\",",
											"                    \"preferredLanguages\",",
											"                    \"registrations\",",
											"                    \"tenantId\",",
											"      \"twoFactor\",",
											"       \"uniqueUsername\",",
											"                    \"username\",",
											"                    \"usernameStatus\",",
											"                    \"verified\"",
											"       ",
											"    );",
											"});",
											"",
											"pm.test(\"Verify registrations exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0]).to.have.keys(",
											"        \"applicationId\",",
											"        \"data\",",
											"        \"id\",",
											"        \"insertInstant\",",
											"        \"lastLoginInstant\",",
											"        \"lastUpdateInstant\",",
											"        \"preferredLanguages\",",
											"        \"roles\",",
											"        \"tokens\",",
											"        \"username\",",
											"        \"usernameStatus\",",
											"        \"verified\"",
											"    );",
											"});",
											"",
											"pm.test(\"Verify Response should contain phone number\", function(){",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0].username).to.contain(\"9970821336\");",
											"});",
											"",
											"pm.test(\" Verify response of usernameStatus should be ACTIVE\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.usernameStatus).to.equal(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/verifyOTP?phone={{mentor_phone}}&otp=0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{mentor_phone}}"
										},
										{
											"key": "otp",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1. Send Otp",
					"item": [
						{
							"name": "Send OTP valid scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json().status.providerResponseCode==308){\r",
											"\r",
											"    pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response is an object with status property\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('status');\r",
											"    });\r",
											"    pm.test(\"Provider property exists in the response status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.have.property('provider');\r",
											"    });\r",
											"\r",
											"\r",
											"     pm.test(\"Phone property exists in the response status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.be.an('object');\r",
											"    pm.expect(responseData.status.phone).to.exist;\r",
											"      });\r",
											"\r",
											"\r",
											"    pm.test(\"Network response code should exist in the status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.exist;\r",
											"    pm.expect(responseData.status.networkResponseCode).to.exist;\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Error property exists in the response status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status.error).to.exist;\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Provider response code should exist in the status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.be.an('object');\r",
											"    pm.expect(responseData.status.providerResponseCode).to.exist;\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"if(pm.response.json().status.providerResponseCode==null){\r",
											"    pm.test(\"Verify Response should be 200 OK\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify response provider is Gupshup\", function() { \r",
											"    pm.expect(pm.response.json().status.provider).to.exist;\r",
											"    pm.expect(pm.response.json().status.provider).to.eql(\"Gupshup\");\r",
											"    });\r",
											"\r",
											"    pm.test(\" Verify Response should contain phone number\",function(){\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"mentor_phone\"))\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify network Response Code is 200\", function() {\r",
											"    pm.expect(pm.response.json().status.networkResponseCode).to.eql(200);\r",
											"    pm.expect(pm.response.json().status.providerSuccessResponse).to.satisfy(function(responseText) {\r",
											"        return responseText.includes(\"OTP re-sent\") || responseText.includes(\"OTP sent\") \r",
											"        || responseText.includes(\"Old OTP expired. New OTP generated and re-sent.\"); \r",
											"    })\r",
											"    });\r",
											"    pm.test(\"Verify Response should contain messageID\",function(){\r",
											"      pm.expect(pm.response.text()).to.include(\"messageID\")\r",
											"    });\r",
											"\r",
											"    pm.test(\" Verify provider Response Code\",function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"providerResponseCode\");\r",
											"    pm.expect(pm.response.json().status.networkResponseCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\" Verify Response should contain status\", function() {\r",
											"    pm.expect(pm.response.json().status.status).to.eql('success');\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/sendOTP?phone={{mentor_phone}}&errorMessage=Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal.",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{mentor_phone}}"
										},
										{
											"key": "errorMessage",
											"value": "Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send OTP with error message only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status code should be 400\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"pm.test(\"Verify Response should contain message\",function(){\r",
											"        pm.expect(pm.response.json().message).to.exist;\r",
											"        pm.expect(pm.response.text()).to.include(\"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string.\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should be exist Bad Request \", function() {\r",
											"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");\r",
											"    pm.expect(pm.response.json().error).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{user-service}}/api/sendOTP?errorMessage=Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal.",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "8928256445145",
											"disabled": true
										},
										{
											"key": "errorMessage",
											"value": "Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send OTP without params.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status code should be 400\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"pm.test(\"Verify Response should contain message phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string\",function(){\r",
											"        pm.expect(pm.response.json().message).to.exist;\r",
											"        pm.expect(pm.response.text()).to.include(\"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string.\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should be exist Bad Request\", function() {\r",
											"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");\r",
											"    pm.expect(pm.response.json().error).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{user-service}}/api/sendOTP",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "79820573609000000",
											"disabled": true
										},
										{
											"key": "errorMessage",
											"value": "Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2. Verify Otp",
					"item": [
						{
							"name": "Verify OTP valid scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 200 OK\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify provider is Gupshup\", function() {\r",
											"    pm.expect(pm.response.json().status.provider).to.exist;\r",
											"    pm.expect(pm.response.json().status.provider).to.eql(\"Gupshup\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Response body should contain the expected fields and values \",function(){\r",
											"    pm.response.to.have.jsonBody({\r",
											"        \"status\": {\r",
											"            \"provider\": \"Gupshup\",\r",
											"            \"phone\": \"7982057360\",\r",
											"            \"networkResponseCode\": 0,\r",
											"            \"messageID\": \"\",\r",
											"            \"error\": null,\r",
											"            \"providerResponseCode\": null,\r",
											"            \"providerSuccessResponse\": \"\",\r",
											"            \"status\": \"\"\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify providerSuccessResponse field value\", function () {\r",
											"    const expectedSuccessResponse = \"OTP matched.\";\r",
											"    pm.response.to.have.jsonBody(\"status.providerSuccessResponse\", expectedSuccessResponse);\r",
											"});\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Provider field should not be empty\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  pm.expect(responseData.status.provider).to.exist.and.to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"NetworkResponseCode is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status.networkResponseCode).to.be.a('number').and.to.satisfy((num) => num >= 0, \"NetworkResponseCode should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"MessageID is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status.messageID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"MessageID should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field should be either null or a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.status.error).to.satisfy((error) => error === null || typeof error === 'string' && error.length > 0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?phone={{mentor_phone}}&otp=0000",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{mentor_phone}}"
										},
										{
											"key": "otp",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP correct phone no. wrong otp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response should contain message\", function() {\r",
											"    pm.expect(pm.response.json().message).to.exist;\r",
											"    pm.expect(pm.response.json().message).to.contain(\"phone must be a valid phone number\");\r",
											"});\r",
											"pm.test(\"Verify Response error should be Bad Request\",function(){\r",
											"pm.expect(pm.response.text()).to.include(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?phone=7982057322222&otp=9104",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "7982057322222"
										},
										{
											"key": "otp",
											"value": "9104"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP with phone no. only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response status should be 400 is\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message Response should be otp must be shorter than or equal to 10 characters,otp should not be empty,otp must be a string\",function(){\r",
											"pm.expect(pm.response.json().message).to.contain(\"otp must be shorter than or equal to 10 characters\",\r",
											"        \"otp should not be empty\",\r",
											"        \"otp must be a string\")\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error response should be bad request\", function(){\r",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?phone=7982057360",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "7982057360"
										},
										{
											"key": "otp",
											"value": "9104",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP with otp only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify response status should be 400 is\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message Response should be phone must be a valid phone number,phone should not be empty,phone must be a string\",function(){\r",
											"pm.expect(pm.response.json().message).to.contain(\"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error response should be bad request\", function(){\r",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?otp=9104",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "7982057360",
											"disabled": true
										},
										{
											"key": "otp",
											"value": "9104"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response status should be 400 is\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message Response should contain text \",function(){\r",
											"pm.expect(pm.response.json().message).to.contain( \"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string\",\r",
											"        \"otp must be shorter than or equal to 10 characters\",\r",
											"        \"otp should not be empty\",\r",
											"        \"otp must be a string\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error response should be bad request\", function(){\r",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "9640863206",
											"disabled": true
										},
										{
											"key": "otp",
											"value": "9104",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3. Login",
					"item": [
						{
							"name": "Login Valid Scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var extractedToken = jsonData.token;",
											"",
											"// Set the environment variable",
											"pm.environment.set(\"token\", jsonData.result.data.user.token);",
											"pm.collectionVariables.set(\"token\", jsonData.result.data.user.token);",
											"",
											"",
											"",
											"pm.test(\"Verify Response should be 201 OK\", function(){",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify Response code is OK\", function() {",
											"    pm.expect(pm.response.json().responseCode).to.equal(\"OK\");",
											"});",
											"",
											"pm.test(\"Verify in Params exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().params).to.have.keys(\"responseMsgId\", \"msgId\", \"err\", \"status\", \"errMsg\");",
											"});",
											"",
											"pm.test(\"Verify ts property should exists\", function() {",
											"    pm.expect(pm.response.json().ts).to.exist;",
											"});",
											"",
											"pm.test(\"Verify ID property should be exist \", function() {",
											"    pm.expect(pm.response.json().id).to.exist;",
											"});",
											"",
											"pm.test(\"Verify result should be exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result).to.have.keys(\"responseMsg\",\"accountStatus\",\"data\");",
											"});",
											"",
											"pm.test(\"Verify Data exists and has the correct property\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.exist;",
											"});",
											"",
											"pm.test(\" Verify User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.have.keys(\"refreshToken\", \"refreshTokenId\", \"token\", \"tokenExpirationInstant\", \"user\");",
											"});",
											"",
											"pm.test(\"User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user).to.have.keys(",
											"                    \"active\",",
											"                    \"connectorId\",",
											"                    \"data\",",
											"                    \"fullName\",",
											"                    \"id\",",
											"                    \"insertInstant\",",
											"                    \"lastLoginInstant\",",
											"                    \"lastUpdateInstant\",",
											"                    \"memberships\",",
											"                    \"mobilePhone\",",
											"                    \"passwordChangeRequired\",",
											"                    \"passwordLastUpdateInstant\",",
											"                    \"preferredLanguages\",",
											"                    \"registrations\",",
											"                    \"tenantId\",",
											"      \"twoFactor\",",
											"       \"uniqueUsername\",",
											"                    \"username\",",
											"                    \"usernameStatus\",",
											"                    \"verified\"",
											"       ",
											"    );",
											"});",
											"",
											"pm.test(\" Verify registrations exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0]).to.have.keys(",
											"        \"applicationId\",",
											"        \"data\",",
											"        \"id\",",
											"        \"insertInstant\",",
											"        \"lastLoginInstant\",",
											"        \"lastUpdateInstant\",",
											"        \"preferredLanguages\",",
											"        \"roles\",",
											"        \"tokens\",",
											"        \"username\",",
											"        \"usernameStatus\",",
											"        \"verified\"",
											"    );",
											"});",
											"",
											"pm.test(\" Verify Response should contain phone number\", function(){",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0].username).to.contain(\"9970821336\");",
											"});",
											"",
											"pm.test(\" Verify response of usernameStatus should be ACTIVE\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.usernameStatus).to.equal(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@samagra123\",\n    \"loginId\": \"{{mentor_phone}}\",\n    \"applicationId\": \"320b020a-3d84-4d8a-a191-da4e972c2951\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With only login and application ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\"Verify message Response should contain text \",function(){",
											"pm.expect(pm.response.json().message).to.contain(\"password must be shorter than or equal to 100 characters\",",
											"        \"password should not be empty\",",
											"        \"password must be a string\")",
											"});",
											"",
											"pm.test(\"Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n    \"loginId\": \"{{phone}}\",\n    \"applicationId\": \"320b020a-3d84-4d8a-a191-da4e972c2951\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Without Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\"Verify message Response should contain text \",function(){",
											"pm.expect(pm.response.json().message).to.contain(\"loginId must be shorter than or equal to 80 characters\",",
											"        \"loginId should not be empty\",",
											"        \"loginId must be a string\",",
											"        \"password must be shorter than or equal to 100 characters\",",
											"        \"password should not be empty\",",
											"        \"password must be a string\",",
											"        \"applicationId should not be empty\",",
											"        \"applicationId must be a UUID\")",
											"});",
											"",
											"pm.test(\" Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Without empty loginId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\" Verify message Response should contain text loginId should not be empty\",function(){",
											"pm.expect(pm.response.json().message).to.contain(\"loginId should not be empty\")",
											"});",
											"",
											"pm.test(\"Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@samagra123\",\n    \"loginId\": \"\",\n    \"applicationId\": \"320b020a-3d84-4d8a-a191-da4e972c2951\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Without Application ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\"Verify message Response should contain text\",function(){",
											"pm.expect(pm.response.json().message).to.contain( \"loginId should not be empty\",",
											"        \"applicationId should not be empty\",",
											"        \"applicationId must be a UUID\")",
											"});",
											"",
											"pm.test(\"Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@samagra123\",\n    \"loginId\": \"\",\n    \"applicationId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\"Verify message Response should contain text\",function(){",
											"pm.expect(pm.response.json().message).to.contain( \"loginId should not be empty\",",
											"        \"applicationId should not be empty\",",
											"        \"applicationId must be a UUID\")",
											"});",
											"",
											"pm.test(\"Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@123\",\n    \"loginId\": \"\",\n    \"applicationId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.Create Assesment Survey Result",
					"item": [
						{
							"name": "Create Ass.Valid Scenarios Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 201 OK\",function(){\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg is Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.equal('Success!');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.exist ;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without body Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text Unexpected token in JSON at position 16 \", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token [ in JSON at position 16\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        [\n            {\n                \n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without submission_timestamp Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text submission_timestamp must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"submission_timestamp must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without grade Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8 also grade must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message[0]).to.contain(\"grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8\");\r",
											"pm.expect(pm.response.json().message[1]).to.contain(\"grade must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n    \n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong submission_timestamp Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text Unexpected token a in JSON at position 36\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 36\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \"submission_timestamp\": abcd,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": abcd,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.wrong grade Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text Unexpected token a in JSON at position 74\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 74\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 15a,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 156,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without actor_id Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text actor_id must be one of the following values: 1, 2, 3, 4, 5 also actor_id must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message[0]).to.contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"pm.expect(pm.response.json().message[1]).to.contain(\"actor_id must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n       \n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong actor_id Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text actor_id must be one of the following values: 1, 2, 3, 4, 5\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": -32,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1000,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without udise Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain udise must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"udise must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n       \n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n   \n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.wrong udise Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain Unexpected token a in JSON at position 116\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 116\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 10,\n        \"udise\": a123,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": avcd,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without app_version_code Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain app_version_code must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"app_version_code must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong app_version_code Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain Unexpected token a in JSON at position 155\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 155\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": abcd,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": abcde,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without questions and questions_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain Unexpected token [ in JSON at position 466\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token [ in JSON at position 466\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n       [\n            {\n                \n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong  questions_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 201 OK\",function(){\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg is Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.equal('Success!');\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.exist ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"abnchuudhdejjeojd\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"abrrfrfffrcd\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 201 Created\",function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message Response contain Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.contain(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0]).to.have.property(\"id\");\r",
											"pm.expect(pm.response.json().data[1]).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data should contain id with number\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.a('number');\r",
											"pm.expect(pm.response.json().data[1].id).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data array should not empty\", function() {\r",
											"pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"ewfefefffe\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"wfefeffwfw\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg is `questions.0.value must be a string` \", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"questions.0.value must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.Create Ass. Visit Result",
					"item": [
						{
							"name": "Create Ass. Visit Result valid scenario.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 201 Created\",function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message Response contain Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.contain(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0]).to.have.property(\"id\");\r",
											"pm.expect(pm.response.json().data[1]).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data should contain id with number\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.a('number');\r",
											"pm.expect(pm.response.json().data[1].id).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data array should not empty\", function() {\r",
											"pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"Validation failed (parsable array expected\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result with invalid actor_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"  Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 20,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without actor_id  in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"pm.expect(pm.response.json().message).contain(\"actor_id must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n       \n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result invalid assessment_type_id in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"assessment_type_id must be one of the following values: 1, 2, 4, 3, 5\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 12,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result invalid grade.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 1234234234324,\n        \"grade\": 11,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without grade.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8\");\r",
											"pm.expect(pm.response.json().message).contain(\"grade must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 1234234234324,\n        \n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without number_of_students",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"no_of_student must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 1234234234324,\n        \"grade\":1,\n       \n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result array in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results must be an array\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.achivement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.achievement must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.competency_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.competency_id must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n              \n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.is_passed in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.is_passed must be a boolean value\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.module in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.module must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.odk_reslt in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.odk_results must be an array\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without results.odk_results.answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.odk_results.0.answer must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                       \n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without results.odk_results.question",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.odk_results.0.question must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.session_completed in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.session_completed must be a boolean value\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n               \n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.start_time in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.start_time must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.student_name in req body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.student_name must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n              \n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.student_session in req body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.student_session must be a UUID\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n               \n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.success_criteria in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.success_criteria must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.total_questions in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.total_questions must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n               \n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without workflow_ref_id in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.workflow_ref_id must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38\n                \n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result invalid subject_id in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"subject_id must be one of the following values: 1, 2, 2\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 11,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without subject_id req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"subject_id must be one of the following values: 1, 2, 2\");\r",
											"pm.expect(pm.response.json().message).contain(\"subject_id must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n       \n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without submission_timestamp in req body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"submission_timestamp must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result invalid udise in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 500 Internal server error\",function(){\r",
											"pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"Internal server error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 4631547823487\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without udise in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"udise must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445\n       \n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.List Mentor Schools",
					"item": [
						{
							"name": "List Mentor Schools Valid Scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 200 OK\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response should exist and have the correct properties\", function () {\r",
											"    pm.expect(pm.response.json()[0]).to.have.keys([\r",
											"    \"school_id\", \"school_name\", \"udise\", \"district_id\", \"district_name\",\r",
											"    \"block_id\", \"block_name\", \"nyay_panchayat_id\", \"nyay_panchayat_name\",\r",
											"    \"is_visited\", \"lat\", \"long\", \"geo_fence_enabled\"\r",
											"    ]);\r",
											"});\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"School_id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(function(school) {\r",
											"        pm.expect(school.school_id).to.be.a('number').and.to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"School name must be a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(function(school) {\r",
											"        pm.expect(school.school_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"School name should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Is_visited is a boolean value\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(function(school) {\r",
											"        pm.expect(school.is_visited).to.be.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/schools?month=5&year=2023",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"schools"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/schools?month=5&year=2023",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"schools"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Mentor Schools with month only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be greater than 2030\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be less than 2000\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/schools?month=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"schools"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Mentor Schools Without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"month must not be greater than 12\");\r",
											"pm.expect(pm.response.json().message).contain(\"month must not be less than 1\");\r",
											"pm.expect(pm.response.json().message).contain(\"month must be an integer number\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be greater than 2030\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be less than 2000\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/schools",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"schools"
									],
									"query": [
										{
											"key": "month",
											"value": "5",
											"disabled": true
										},
										{
											"key": "year",
											"value": "2023",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7.Home Overview",
					"item": [
						{
							"name": "Home Overview valid scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 200 OK\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"verify Response Validate\", function () {\r",
											"const expectedResponse = {\r",
											"\"visited_schools\": 31,\r",
											"\"total_assessments\": 116,\r",
											"\"average_assessment_time\": 40,\r",
											"\"grades\": [\r",
											"{\"grade\":1,\"total_assessments\":41},\r",
											"{\"grade\":2,\"total_assessments\":42},\r",
											"{\"grade\":3,\"total_assessments\":33}\r",
											"]\r",
											"};\r",
											"pm.response.to.have.jsonBody(expectedResponse);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/dashboard-overview?month=5&year=2023",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"dashboard-overview"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/dashboard-overview?month=5&year=2023",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"dashboard-overview"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Overview without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response message should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"month must not be greater than 12\");\r",
											"pm.expect(pm.response.json().message).contain(\"month must not be less than 1\");\r",
											"pm.expect(pm.response.json().message).contain(\"month must be an integer number\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be greater than 2030\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be less than 2000\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/dashboard-overview",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"dashboard-overview"
									],
									"query": [
										{
											"key": "month",
											"value": "5",
											"disabled": true
										},
										{
											"key": "year",
											"value": "2023",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Overview With month only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response message should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be greater than 2030\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be less than 2000\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/dashboard-overview?month=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"dashboard-overview"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.Mentor Details",
					"item": [
						{
							"name": "Mentor Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 200 OK\",function(){",
											"pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\" Verify Response should content\",function(){",
											"    pm.expect(pm.response.json()).to.have.keys([",
											"\"mentor\",\"school_list\",\"home_overview\",\"examiner_cycle_details\",\"app_actions\"",
											"]);});",
											"",
											"",
											"pm.test(\" Verify mentor {} Response should content\",function(){",
											"    pm.expect(pm.response.json().mentor).to.have.keys([",
											"\"id\",\"designation_id\",\"district_id\",\"block_id\",\"officer_name\",\"phone_no\",\"actor_id\",\"teacher_school_list_mapping\",\"district_name\",\"block_town_name\"",
											"]);});",
											"",
											"pm.test(\" Verify mentor.teacher_school_list_mapping Response should content\",function(){",
											"    pm.expect(pm.response.json().mentor.teacher_school_list_mapping.school_list).to.have.keys([",
											"\"district_id\",\"block_id\",\"nyay_panchayat_id\",\"udise\",\"lat\",\"long\",\"geo_fence_enabled\",\"school_id\",\"school_name\",\"district_name\",\"block_name\",\"nyay_panchayat_name\"",
											"]);});",
											"",
											"pm.test(\" Verify school list [] Response should exist this properties\",function(){",
											"    pm.expect(pm.response.json().school_list[0]).to.have.keys([",
											"\"school_id\",\"school_name\",\"udise\",\"district_id\",\"district_name\",\"block_id\",\"block_name\",\"nyay_panchayat_id\",\"nyay_panchayat_name\",\"is_visited\",\"lat\",\"long\",\"geo_fence_enabled\"",
											"]);});",
											"",
											"",
											"pm.test(\" Verify home_overview {} Response should content this properties\",function(){",
											"    pm.expect(pm.response.json().home_overview).to.have.keys([",
											"\"visited_schools\",\"total_assessments\",\"average_assessment_time\",\"grades\"",
											"]);});",
											"",
											"pm.test(\" Verify home_overview.grade[] Response should content this properties\",function(){",
											"    pm.expect(pm.response.json().home_overview.grades[0]).to.have.keys([",
											"\"grade\",\"total_assessments\"",
											"]);});",
											"",
											"",
											"pm.test(\" Verify home_overview.grade[] Response should content this properties\",function(){",
											"    pm.expect(pm.response.json().home_overview.grades[0]).to.have.keys([",
											"\"grade\",\"total_assessments\"",
											"])});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"details"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.Mentor detail v2 API",
					"item": [
						{
							"name": "v2/mentor/details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with mentor property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('mentor');",
											"});",
											"",
											"pm.test(\"Response is an object with school_list property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('school_list');",
											"});",
											"",
											"pm.test(\"Response is an object with home_overview property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('home_overview');",
											"});",
											"",
											"pm.test(\"Response is an object with app_actions property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('app_actions');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3MzcyMDg0NDQsImlhdCI6MTcwNTY3MjQ0NCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiJmYWViMjBmMS1mNjJhLTRkNzktODQ0NC1lMTAzZDlhZWFlZTEiLCJqdGkiOiJjYjY3YTc1MC02MjUxLTQxZTgtYTQzMS00NTJjMDcyZGIwYTkiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJSRUZSRVNIX1RPS0VOIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiODkyODI5NTAwNSIsImFwcGxpY2F0aW9uSWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJyb2xlcyI6W10sImF1dGhfdGltZSI6MTcwNTY2NzU4Miwic2lkIjoiZjQ4NzEyZmUtZTUzYy00ZjFhLWEwZDItZmJmMzkzNDZmYjBmIiwiaHR0cHM6Ly9oYXN1cmEuaW8vand0L2NsYWltcyI6eyJ4LWhhc3VyYS1hbGxvd2VkLXJvbGVzIjpbIk9wZW5Sb2xlIiwiRElFVCIsIm1hbmF2X3NhbXBhZGEiXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiRElFVCIsIlgtSGFzdXJhLVVzZXItSWQiOiI4OTI4Mjk1MDA1In0sImFwaVJvbGVzIjpbIkRJRVQiXX0.tfxbXl3xhIzm--htvDAn40fbzxRL9Xd2PqqPLbGQygH3cNQhi4uBAAALIc51rzTZwo7xjcnw2izgZ2BaKB_YgHQQk3RNF3o2uM9MMKqBLhYXn2x3lkllH638iP6hMtaNu1L7J_Zt_UK665ZCwHHqKcom-vuVFC6-2We9jdr8EF_FS8l0qLIRRI8XQ3r5rsKuGqpvcLSDye8IPS3SG9AuGPklKNgF6-S8KK1Gk8XyJSDP7Eslw4Ocn2rjJtyF73Kh05V2x6jo9ElAH7IFqRU-7UIHxuYSAFrrY6usl_y9P2_3yNBuw2lIrT5jK2P4Q_rd2YXwHiGOWbRK4H7ynOq77g"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "AC2001"
									},
									{
										"key": "deviceManufacturer",
										"value": "OnePlus"
									},
									{
										"key": "deviceVersion",
										"value": "33"
									},
									{
										"key": "appVersionCode",
										"value": "202021"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2.1"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/mentor/details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"mentor",
										"details"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.Metadata",
					"item": [
						{
							"name": "Metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Verify Response should be 200 OK\",function(){",
											"pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify Response should content\",function(){",
											"     pm.expect(pm.response.json()).to.have.keys([",
											"         \"actors\",\"designations\",\"subjects\",\"assessment_types\",\"competency_mapping\",\"workflow_ref_ids\"",
											"])});",
											"",
											"",
											"pm.test(\"Test 244 Verify the 'actors' array should contain the expected data\", function () {",
											"   const expectedActors =  [",
											"  {",
											"    \"id\": 3,",
											"    \"name\": \"teacher\"",
											"  },",
											"  {",
											"    \"id\": 1,",
											"    \"name\": \"mentor\"",
											"  },",
											"  {",
											"    \"id\": 2,",
											"    \"name\": \"examiner\"",
											"  },",
											"  {",
											"    \"id\": 4,",
											"    \"name\": \"Diet Mentor\"",
											"  },",
											"  {",
											"    \"id\": 5,",
											"    \"name\": \"Parent\"",
											"  },",
											"  {",
											"    \"id\": 0,",
											"    \"name\": \"Null\"",
											"  }",
											"];",
											"  pm.expect(pm.response.json().actors).to.eql(expectedActors);",
											"});",
											"",
											"const expectedDesignations = [",
											"  {",
											"    \"id\": 1,",
											"    \"name\": \"examiner\"",
											"  },",
											"  {",
											"    \"id\": 2,",
											"    \"name\": \"TSPL\"",
											"  },",
											"  {",
											"    \"id\": 3,",
											"    \"name\": \"S.R. G\"",
											"  },",
											"  {",
											"    \"id\": 4,",
											"    \"name\": \"Prinicipal Secretary\"",
											"  },",
											"  {",
											"    \"id\": 5,",
											"    \"name\": \"Diet Mentor\"",
											"  },",
											"  {",
											"    \"id\": 6,",
											"    \"name\": \"teacher\"",
											"  },",
											"  {",
											"    \"id\": 7,",
											"    \"name\": \"ARP\"",
											"  },",
											"  {",
											"    \"id\": 8,",
											"    \"name\": \"TEST\"",
											"  },",
											"  {",
											"    \"id\": 9,",
											"    \"name\": \"SRG\"",
											"  },",
											"  {",
											"    \"id\": 10,",
											"    \"name\": \"ARP NAGAR\"",
											"  }",
											"];",
											"",
											"",
											"pm.test(\" Verify response should contain the 'designations' array\", function () {",
											"  pm.expect(pm.response.json().designations).to.exist;",
											"  pm.expect(pm.response.json().designations).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Verify the 'designations' array should not be empty\", function () {",
											"  pm.expect(pm.response.json().designations).to.have.length.above(0);",
											"});",
											"",
											"",
											"pm.test(\" Verify the 'designations' array should contain the expected data\", function () {",
											"  pm.expect(pm.response.json().designations).to.eql(expectedDesignations);",
											"});",
											"",
											"const expectedSubjects = [",
											"  {",
											"    \"id\": 1,",
											"    \"name\": \"Math\"",
											"  },",
											"  {",
											"    \"id\": 2,",
											"    \"name\": \"Hindi\"",
											"  },",
											"  {",
											"    \"id\": 3,",
											"    \"name\": \"English\"",
											"  },",
											"  {",
											"    \"id\": 0,",
											"    \"name\": \"NULL\"",
											"  }",
											"];",
											"",
											"pm.test(\"Verify response should contain the 'subjects' array\", function () {",
											"  pm.expect(pm.response.json().subjects).to.exist;",
											"  pm.expect(pm.response.json().subjects).to.be.an('array');",
											"});",
											"",
											"pm.test(\" Verify the 'subjects' array should not be empty\", function () {",
											"  pm.expect(pm.response.json().subjects).to.have.length.above(0);",
											"});",
											"",
											"pm.test(\" Verify the 'subjects' array should contain the expected data\", function () {",
											"  pm.expect(pm.response.json().subjects).to.eql(expectedSubjects);",
											"});",
											"",
											"const expectedAssessmentTypes = [",
											"  {",
											"    \"id\": 1,",
											"    \"name\": \"nipun_abhyas\"",
											"  },",
											"  {",
											"    \"id\": 2,",
											"    \"name\": \"suchi_abhyas\"",
											"  },",
											"  {",
											"    \"id\": 3,",
											"    \"name\": \"nipun_lakshya\"",
											"  },",
											"  {",
											"    \"id\": 4,",
											"    \"name\": \"nipun_suchi\"",
											"  },",
											"  {",
											"    \"id\": 5,",
											"    \"name\": \"state_led_assessment\"",
											"  }",
											"];",
											"",
											"",
											"pm.test(\"Test 251 Verify response should contain the 'assessment_types' array\", function () {",
											"  pm.expect(pm.response.json().assessment_types).to.exist;",
											"  pm.expect(pm.response.json().assessment_types).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\" Verify the 'assessment_types' array should not be empty\", function () {",
											"  pm.expect(pm.response.json().assessment_types).to.have.length.above(0);",
											"});",
											"",
											"",
											"pm.test(\" Verify the 'assessment_types' array should contain the expected data\", function () {",
											"  pm.expect(pm.response.json().assessment_types).to.eql(expectedAssessmentTypes);",
											"});",
											"",
											"pm.test(\" Verify test Verify competency_mapping [] should content\",function(){",
											"     pm.expect(pm.response.json().competency_mapping[0]).to.have.keys([",
											"         \"grade\",\"learning_outcome\",\"competency_id\",\"flow_state\",\"subject_id\"",
											"])});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/metadata",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"metadata"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Teacher flow",
			"item": [
				{
					"name": "Auth V2",
					"item": [
						{
							"name": "Send OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// If response providerResponseCode==null",
											"",
											"if(pm.response.json().status.providerResponseCode==null)",
											"{",
											"    pm.test(\" Verify Response should be 201 OK\",function(){",
											"    pm.response.to.have.status(201);",
											"    });",
											"",
											"    pm.test(\" Verify provider is Gupshup\", function() {",
											"    pm.expect(pm.response.json().status.provider).to.exist;",
											"    pm.expect(pm.response.json().status.provider).to.eql(\"Gupshup\");",
											"     });",
											"",
											"    pm.test(\" Verify the Response body should contain the expected fields and values \",function(){",
											"    pm.response.to.have.jsonBody({",
											"        \"status\": {",
											"            \"provider\": \"Gupshup\",",
											"            \"phone\": \"7982057360\",",
											"            \"networkResponseCode\": 0,",
											"            \"messageID\": \"\",",
											"            \"error\": null,",
											"            \"providerResponseCode\": null,",
											"            \"providerSuccessResponse\": \"\",",
											"            \"status\": \"\"",
											"        }",
											"        });",
											"    });",
											"",
											"    pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"    });",
											"",
											"    pm.test(\"Provider field should not be empty\", function () {",
											"  const responseData = pm.response.json();",
											"    pm.expect(responseData.status.provider).to.exist.and.to.not.be.empty;",
											"    });",
											"",
											"    pm.test(\"NetworkResponseCode is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.networkResponseCode).to.be.a('number').and.to.satisfy((num) => num >= 0, \"NetworkResponseCode should be a non-negative integer\");",
											"     });",
											"    pm.test(\"MessageID is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.messageID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"MessageID should not be empty\");",
											"    });",
											"    pm.test(\"Error field should be either null or a non-empty string\", function () {",
											"     const responseData = pm.response.json();",
											"  ",
											"     pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.error).to.satisfy((error) => error === null || typeof error === 'string' && error.length > 0);",
											"     });",
											"",
											"}",
											"",
											"",
											"// If response providerResponseCode==null",
											"",
											"if(pm.response.json().status.providerResponseCode==308)",
											"{",
											"   pm.test(\" Verify Response should be 201 OK\",function(){",
											"   pm.response.to.have.status(201);",
											"    });",
											"   pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"   });",
											"   pm.test(\"Provider field should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.provider).to.exist.and.to.not.be.empty;",
											"   });",
											"   pm.test(\"Network response code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.networkResponseCode).to.be.a('number');",
											"    pm.expect(responseData.status.networkResponseCode).to.be.at.least(0);",
											"   });",
											"   pm.test(\"Error object should have errorText and errorCode fields\", function () {",
											"    const responseData = pm.response.json().status;",
											"    pm.expect(responseData.error).to.exist;",
											"    pm.expect(responseData.error.errorText).to.exist;",
											"    pm.expect(responseData.error.errorCode).to.exist;",
											"   });",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/sendOTP?phone={{teacher_phone}}&errorMessage=Mobile%20number%20could%20not%20be%20verified.%20Please%20get%20in%20touch%20with%20the%20DC%20in%20your%20District%27s%20BSA%20office%20if%20your%20number%20is%20not%20registered%20on%20the%20Prerna%20Portal.",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{teacher_phone}}"
										},
										{
											"key": "errorMessage",
											"value": "Mobile%20number%20could%20not%20be%20verified.%20Please%20get%20in%20touch%20with%20the%20DC%20in%20your%20District%27s%20BSA%20office%20if%20your%20number%20is%20not%20registered%20on%20the%20Prerna%20Portal."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var jsonData = pm.response.json();",
											"// var extractedToken = jsonData.token;",
											"",
											"// // Set the environment variable",
											"// pm.environment.set(\"token\", jsonData.result.data.user.token);",
											"",
											"",
											"// using old auth for now",
											"",
											"",
											"",
											"pm.test(\" Verify Response should be 201 OK\", function(){",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\" Verify Response code is OK\", function() {",
											"    pm.expect(pm.response.json().responseCode).to.equal(\"OK\");",
											"});",
											"",
											"pm.test(\" Verify in Params exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().params).to.have.keys(\"responseMsgId\", \"msgId\", \"err\", \"status\", \"errMsg\");",
											"});",
											"",
											"pm.test(\" Verify ts property should exists\", function() {",
											"    pm.expect(pm.response.json().ts).to.exist;",
											"});",
											"",
											"pm.test(\" Verify ID property should be exist \", function() {",
											"    pm.expect(pm.response.json().id).to.exist;",
											"});",
											"",
											"pm.test(\"Verify result should be exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result).to.have.keys(\"responseMsg\",\"accountStatus\",\"data\");",
											"});",
											"",
											"pm.test(\"Verify Data exists and has the correct property\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.exist;",
											"});",
											"",
											"pm.test(\" Verify User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.have.keys(\"refreshToken\", \"refreshTokenId\", \"token\", \"tokenExpirationInstant\", \"user\");",
											"});",
											"",
											"pm.test(\"User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user).to.have.keys(",
											"                    \"active\",",
											"                    \"connectorId\",",
											"                    \"data\",",
											"                    \"fullName\",",
											"                    \"id\",",
											"                    \"insertInstant\",",
											"                    \"lastLoginInstant\",",
											"                    \"lastUpdateInstant\",",
											"                    \"memberships\",",
											"                    \"mobilePhone\",",
											"                    \"passwordChangeRequired\",",
											"                    \"passwordLastUpdateInstant\",",
											"                    \"preferredLanguages\",",
											"                    \"registrations\",",
											"                    \"tenantId\",",
											"      \"twoFactor\",",
											"       \"uniqueUsername\",",
											"                    \"username\",",
											"                    \"usernameStatus\",",
											"                    \"verified\"",
											"       ",
											"    );",
											"});",
											"",
											"pm.test(\"Verify registrations exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0]).to.have.keys(",
											"        \"applicationId\",",
											"        \"data\",",
											"        \"id\",",
											"        \"insertInstant\",",
											"        \"lastLoginInstant\",",
											"        \"lastUpdateInstant\",",
											"        \"preferredLanguages\",",
											"        \"roles\",",
											"        \"tokens\",",
											"        \"username\",",
											"        \"usernameStatus\",",
											"        \"verified\"",
											"    );",
											"});",
											"",
											"pm.test(\" Verify Response should contain phone number\", function(){",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0].username).to.contain(\"9970821336\");",
											"});",
											"",
											"pm.test(\"Verify response of usernameStatus should be ACTIVE\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.usernameStatus).to.equal(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/verifyOTP?phone={{mentor_phone}}&otp=0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{mentor_phone}}"
										},
										{
											"key": "otp",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1. Send Otp",
					"item": [
						{
							"name": "Send OTP valid scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json().status.providerResponseCode==308){\r",
											"\r",
											"    pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response is an object with status property\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('status');\r",
											"    });\r",
											"    pm.test(\"Provider property exists in the response status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.have.property('provider');\r",
											"    });\r",
											"\r",
											"\r",
											"     pm.test(\"Phone property exists in the response status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.be.an('object');\r",
											"    pm.expect(responseData.status.phone).to.exist;\r",
											"      });\r",
											"\r",
											"\r",
											"    pm.test(\"Network response code should exist in the status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.exist;\r",
											"    pm.expect(responseData.status.networkResponseCode).to.exist;\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Error property exists in the response status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status.error).to.exist;\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Provider response code should exist in the status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.be.an('object');\r",
											"    pm.expect(responseData.status.providerResponseCode).to.exist;\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"if(pm.response.json().status.providerResponseCode==null){\r",
											"    pm.test(\" Verify Response should be 200 OK\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify response provider is Gupshup\", function() { \r",
											"    pm.expect(pm.response.json().status.provider).to.exist;\r",
											"    pm.expect(pm.response.json().status.provider).to.eql(\"Gupshup\");\r",
											"    });\r",
											"\r",
											"    pm.test(\" Verify Response should contain phone number\",function(){\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"teacher_phone\"))\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify network Response Code is 200\", function() {\r",
											"    pm.expect(pm.response.json().status.networkResponseCode).to.eql(200);\r",
											"    pm.expect(pm.response.json().status.providerSuccessResponse).to.satisfy(function(responseText) {\r",
											"        return responseText.includes(\"OTP re-sent\") || responseText.includes(\"OTP sent\") \r",
											"        || responseText.includes(\"Old OTP expired. New OTP generated and re-sent.\"); \r",
											"    })\r",
											"    });\r",
											"    pm.test(\" Verify Response should contain messageID\",function(){\r",
											"      pm.expect(pm.response.text()).to.include(\"messageID\")\r",
											"    });\r",
											"\r",
											"    pm.test(\" Verify provider Response Code\",function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"providerResponseCode\");\r",
											"    pm.expect(pm.response.json().status.networkResponseCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify Response should contain status\", function() {\r",
											"    pm.expect(pm.response.json().status.status).to.eql('success');\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/sendOTP?phone={{teacher_phone}}&errorMessage=Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal.",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{teacher_phone}}"
										},
										{
											"key": "errorMessage",
											"value": "Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send OTP with error message only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify status code should be 400\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"pm.test(\"Verify Response should contain message\",function(){\r",
											"        pm.expect(pm.response.json().message).to.exist;\r",
											"        pm.expect(pm.response.text()).to.include(\"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string.\")\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should be exist Bad Request \", function() {\r",
											"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");\r",
											"    pm.expect(pm.response.json().error).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{user-service}}/api/sendOTP?errorMessage=Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal.",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "8928256445145",
											"disabled": true
										},
										{
											"key": "errorMessage",
											"value": "Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send OTP without params.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status code should be 400\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"pm.test(\"Verify Response should contain message phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string\",function(){\r",
											"        pm.expect(pm.response.json().message).to.exist;\r",
											"        pm.expect(pm.response.text()).to.include(\"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string.\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should be exist Bad Request\", function() {\r",
											"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");\r",
											"    pm.expect(pm.response.json().error).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{user-service}}/api/sendOTP",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "79820573609000000",
											"disabled": true
										},
										{
											"key": "errorMessage",
											"value": "Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2. Verify Otp",
					"item": [
						{
							"name": "Verify OTP valid scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\" Verify provider is Gupshup\", function() {\r",
											"    pm.expect(pm.response.json().status.provider).to.exist;\r",
											"    pm.expect(pm.response.json().status.provider).to.eql(\"Gupshup\");\r",
											"});\r",
											"pm.test(\" Verify Response should contain phone number\",function(){\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"teacher_phone\"));\r",
											"});\r",
											"\r",
											"pm.test(\" Verify the Response body should contain the expected fields and values \",function(){\r",
											"    pm.response.to.have.jsonBody({\r",
											"        \"status\": {\r",
											"            \"provider\": \"Gupshup\",\r",
											"            \"phone\": \"7982057360\",\r",
											"            \"networkResponseCode\": 200,\r",
											"            \"messageID\": \"1690524602354\",\r",
											"            \"error\": null,\r",
											"            \"providerResponseCode\": null,\r",
											"            \"providerSuccessResponse\": \"OTP matched.\",\r",
											"            \"status\": \"success\"\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\" Verify providerSuccessResponse field value\", function () {\r",
											"    const expectedSuccessResponse = \"OTP matched.\";\r",
											"    pm.response.to.have.jsonBody(\"status.providerSuccessResponse\", expectedSuccessResponse);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?phone={{teacher_phone}}&otp=0000",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{teacher_phone}}"
										},
										{
											"key": "otp",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP correct phone no. wrong otp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response should contain message\", function() {\r",
											"    pm.expect(pm.response.json().message).to.exist;\r",
											"    pm.expect(pm.response.json().message).to.contain(\"phone must be a valid phone number\");\r",
											"});\r",
											"pm.test(\" Verify Response error should be Bad Request\",function(){\r",
											"pm.expect(pm.response.text()).to.include(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?phone=7982057322222&otp=9104",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "7982057322222"
										},
										{
											"key": "otp",
											"value": "9104"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP with phone no. only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response status should be 400 is\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message Response should be otp must be shorter than or equal to 10 characters,otp should not be empty,otp must be a string\",function(){\r",
											"pm.expect(pm.response.json().message).to.contain(\"otp must be shorter than or equal to 10 characters\",\r",
											"        \"otp should not be empty\",\r",
											"        \"otp must be a string\")\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error response should be bad request\", function(){\r",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?phone=7982057360",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "7982057360"
										},
										{
											"key": "otp",
											"value": "9104",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP with otp only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify response status should be 400 is\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message Response should be phone must be a valid phone number,phone should not be empty,phone must be a string\",function(){\r",
											"pm.expect(pm.response.json().message).to.contain(\"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string\")\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error response should be bad request\", function(){\r",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?otp=9104",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "7982057360",
											"disabled": true
										},
										{
											"key": "otp",
											"value": "9104"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify response status should be 400 is\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message Response should contain text \",function(){\r",
											"pm.expect(pm.response.json().message).to.contain( \"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string\",\r",
											"        \"otp must be shorter than or equal to 10 characters\",\r",
											"        \"otp should not be empty\",\r",
											"        \"otp must be a string\")\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error response should be bad request\", function(){\r",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "9640863206",
											"disabled": true
										},
										{
											"key": "otp",
											"value": "9104",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3. Login",
					"item": [
						{
							"name": "Login Valid Scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var extractedToken = jsonData.token;",
											"",
											"// Set the environment variable",
											"pm.environment.set(\"token\", jsonData.result.data.user.token);",
											"pm.collectionVariables.set(\"token\", jsonData.result.data.user.token);",
											"",
											"pm.test(\" Verify Response should be 201 OK\",function(){",
											"pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify responseCode and status in params\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"responseCode\", \"OK\");",
											"    pm.expect(jsonData.params).to.have.property(\"status\", \"Success\");",
											"});",
											"",
											"pm.test(\"Verify Keywords in Response\", () => {",
											"const responseBody = pm.response.json();",
											"pm.expect(responseBody).to.include.all.keys(\"responseCode\",\"params\",\"ts\",\"id\",\"result\");",
											"const { params, result } = responseBody;",
											"pm.expect(params).to.include.all.keys(\"responseMsgId\",\"msgId\",\"err\",\"status\", \"errMsg\");",
											"const { user } = result.data;",
											"pm.expect(user).to.include.all.keys(\"refreshToken\",\"refreshTokenId\",\"token\", \"tokenExpirationInstant\");",
											"const { user: userData } = user;",
											"pm.expect(userData).to.include.all.keys(",
											"\"active\",",
											"\"connectorId\",",
											"\"data\",",
											"\"fullName\",",
											"\"id\",",
											"\"insertInstant\",",
											"\"lastLoginInstant\",",
											"\"lastUpdateInstant\",",
											"\"memberships\",",
											"\"mobilePhone\",",
											"\"passwordChangeRequired\",",
											"\"passwordLastUpdateInstant\",",
											"\"preferredLanguages\",",
											"\"registrations\",",
											"\"tenantId\",",
											"\"twoFactor\",",
											"\"uniqueUsername\",",
											"\"username\",",
											"\"usernameStatus\",",
											"\"verified\"",
											");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@samagra123\",\n    \"loginId\": \"{{teacher_phone}}\",\n    \"applicationId\": \"320b020a-3d84-4d8a-a191-da4e972c2951\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With only login and application ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\"Verify message Response should contain text \",function(){",
											"pm.expect(pm.response.json().message).to.contain(\"password must be shorter than or equal to 100 characters\",",
											"        \"password should not be empty\",",
											"        \"password must be a string\")",
											"});",
											"",
											"pm.test(\"Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n    \"loginId\": \"{{phone}}\",\n    \"applicationId\": \"320b020a-3d84-4d8a-a191-da4e972c2951\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Without Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\" Verify message Response should contain text \",function(){",
											"pm.expect(pm.response.json().message).to.contain(\"loginId must be shorter than or equal to 80 characters\",",
											"        \"loginId should not be empty\",",
											"        \"loginId must be a string\",",
											"        \"password must be shorter than or equal to 100 characters\",",
											"        \"password should not be empty\",",
											"        \"password must be a string\",",
											"        \"applicationId should not be empty\",",
											"        \"applicationId must be a UUID\")",
											"});",
											"",
											"pm.test(\"Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Without empty loginId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\" Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\" Verify message Response should contain text loginId should not be empty\",function(){",
											"pm.expect(pm.response.json().message).to.contain(\"loginId should not be empty\")",
											"});",
											"",
											"pm.test(\" Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@samagra123\",\n    \"loginId\": \"\",\n    \"applicationId\": \"320b020a-3d84-4d8a-a191-da4e972c2951\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Without Application ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\" Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\" Verify message Response should contain text\",function(){",
											"pm.expect(pm.response.json().message).to.contain( \"loginId should not be empty\",",
											"        \"applicationId should not be empty\",",
											"        \"applicationId must be a UUID\")",
											"});",
											"",
											"pm.test(\" Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@samagra123\",\n    \"loginId\": \"\",\n    \"applicationId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\" Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\" Verify message Response should contain text\",function(){",
											"pm.expect(pm.response.json().message).to.contain( \"loginId should not be empty\",",
											"        \"applicationId should not be empty\",",
											"        \"applicationId must be a UUID\")",
											"});",
											"",
											"pm.test(\" Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@123\",\n    \"loginId\": \"\",\n    \"applicationId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.Create Assesment Survey Result",
					"item": [
						{
							"name": "Create Ass.Valid Scenarios Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 201 OK\",function(){\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg is Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.equal('Success!');\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.exist ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without body Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text Unexpected token in JSON at position 16 \", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token [ in JSON at position 16\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        [\n            {\n                \n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without submission_timestamp Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text submission_timestamp must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"submission_timestamp must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without grade Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message should contain text grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8 also grade must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message[0]).to.contain(\"grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8\");\r",
											"pm.expect(pm.response.json().message[1]).to.contain(\"grade must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n    \n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong submission_timestamp Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message should contain text Unexpected token a in JSON at position 36\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 36\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \"submission_timestamp\": abcd,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": abcd,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.wrong grade Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message should contain text Unexpected token a in JSON at position 74\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 74\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 15a,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 156,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without actor_id Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message should contain text actor_id must be one of the following values: 1, 2, 3, 4, 5 also actor_id must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message[0]).to.contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"pm.expect(pm.response.json().message[1]).to.contain(\"actor_id must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n       \n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong actor_id Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text actor_id must be one of the following values: 1, 2, 3, 4, 5\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": -32,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1000,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without udise Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain udise must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"udise must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n       \n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n   \n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.wrong udise Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message should contain Unexpected token a in JSON at position 116\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 116\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 10,\n        \"udise\": a123,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": avcd,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without app_version_code Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain app_version_code must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"app_version_code must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong app_version_code Survey Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain Unexpected token a in JSON at position 155\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 155\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": abcd,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": abcde,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without questions and questions_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain Unexpected token [ in JSON at position 466\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token [ in JSON at position 466\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n       [\n            {\n                \n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong  questions_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 201 OK\",function(){\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg is Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.equal('Success!');\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.exist ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"abnchuudhdejjeojd\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"abrrfrfffrcd\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 201 Created\",function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message Response contain Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.contain(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0]).to.have.property(\"id\");\r",
											"pm.expect(pm.response.json().data[1]).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data should contain id with number\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.a('number');\r",
											"pm.expect(pm.response.json().data[1].id).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data array should not empty\", function() {\r",
											"pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"ewfefefffe\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"wfefeffwfw\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg is `questions.0.value must be a string` \", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"questions.0.value must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.Create Ass. Visit Result",
					"item": [
						{
							"name": "Create Ass. Visit Result valid scenario.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 201 Created\",function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message Response contain Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.contain(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0]).to.have.property(\"id\");\r",
											"pm.expect(pm.response.json().data[1]).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data should contain id with number\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.a('number');\r",
											"pm.expect(pm.response.json().data[1].id).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data array should not empty\", function() {\r",
											"pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"Validation failed (parsable array expected\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result with invalid actor_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 20,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without actor_id  in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"pm.expect(pm.response.json().message).contain(\"actor_id must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n       \n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result invalid assessment_type_id in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"assessment_type_id must be one of the following values: 1, 2, 4, 3, 5\");\r",
											"});\r",
											"\r",
											"pm.test(\"Test 147 Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 12,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result invalid grade.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 1234234234324,\n        \"grade\": 11,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without grade.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8\");\r",
											"pm.expect(pm.response.json().message).contain(\"grade must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 1234234234324,\n        \n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without number_of_students",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"no_of_student must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 1234234234324,\n        \"grade\":1,\n       \n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result array in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results must be an array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.achivement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.achievement must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.competency_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.competency_id must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n              \n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.is_passed in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.is_passed must be a boolean value\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.module in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.module must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.odk_reslt in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.odk_results must be an array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without results.odk_results.answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.odk_results.0.answer must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                       \n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without results.odk_results.question",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.odk_results.0.question must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Test 180 Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.session_completed in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.session_completed must be a boolean value\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n               \n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.start_time in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.start_time must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.student_name in req body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.student_name must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n              \n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.student_session in req body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.student_session must be a UUID\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n               \n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.success_criteria in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.success_criteria must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without result.total_questions in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.total_questions must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n               \n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without workflow_ref_id in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"results.0.workflow_ref_id must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38\n                \n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result invalid subject_id in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"subject_id must be one of the following values: 1, 2, 2\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 11,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without subject_id req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"subject_id must be one of the following values: 1, 2, 2\");\r",
											"pm.expect(pm.response.json().message).contain(\"subject_id must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n       \n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without submission_timestamp in req body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"submission_timestamp must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result invalid udise in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 500 Internal server error\",function(){\r",
											"pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"Internal server error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 4631547823487\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445,\n        \"udise\": 0\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. Visit Result without udise in req body.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"udise must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599440,\n        \"udise\": 0\n    },\n    {\n        \"actor_id\": 3,\n        \"app_version_code\": 150300,\n        \"assessment_type_id\": 2,\n        \"block_id\": 0,\n        \"grade\": 1,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 3,\n                \"competency_id\": 54,\n                \"end_time\": 1683103446462,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 1\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 2\"\n                    },\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"Question 3\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"Question 4\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1683103446462,\n                \"statement\": \"ODK flow\",\n                \"student_name\": \"Student 1\",\n                \"student_session\": \"16499479-01b9-4822-8c4e-5729fef41624\",\n                \"success_criteria\": 0,\n                \"total_questions\": 4,\n                \"total_time_taken\": 38,\n                \"workflow_ref_id\": \"g1m_npl_w10_1\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1683103599445\n       \n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.List Mentor Schools",
					"item": [
						{
							"name": "List Mentor Schools Valid Scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 200 OK\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response should exist and have the correct properties\", function () {\r",
											"    pm.expect(pm.response.json()[0]).to.have.keys([\r",
											"        \"school_id\", \"school_name\", \"udise\", \"district_id\", \"district_name\",\r",
											"        \"block_id\", \"block_name\", \"nyay_panchayat_id\", \"nyay_panchayat_name\",\r",
											"        \"is_visited\", \"lat\", \"long\", \"geo_fence_enabled\"\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/schools?month=5&year=2023",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"schools"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode property\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('statusCode');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/schools?month=5&year=2023",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"schools"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Mentor Schools with month only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be greater than 2030\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be less than 2000\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/schools?month=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"schools"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Mentor Schools Without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"month must not be greater than 12\");\r",
											"pm.expect(pm.response.json().message).contain(\"month must not be less than 1\");\r",
											"pm.expect(pm.response.json().message).contain(\"month must be an integer number\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be greater than 2030\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be less than 2000\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/schools",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"schools"
									],
									"query": [
										{
											"key": "month",
											"value": "5",
											"disabled": true
										},
										{
											"key": "year",
											"value": "2023",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7.Home Overview",
					"item": [
						{
							"name": "Home Overview valid scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 200 OK\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"verify Response Validate\", function () {\r",
											"const expectedResponse = {\r",
											"\"visited_schools\": 31,\r",
											"\"total_assessments\": 116,\r",
											"\"average_assessment_time\": 40,\r",
											"\"grades\": [\r",
											"{\"grade\":1,\"total_assessments\":41},\r",
											"{\"grade\":2,\"total_assessments\":42},\r",
											"{\"grade\":3,\"total_assessments\":33}\r",
											"]\r",
											"};\r",
											"pm.response.to.have.jsonBody(expectedResponse);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/dashboard-overview?month=5&year=2023",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"dashboard-overview"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode property\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('statusCode');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/dashboard-overview?month=5&year=2023",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"dashboard-overview"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Overview without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response message should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"month must not be greater than 12\");\r",
											"pm.expect(pm.response.json().message).contain(\"month must not be less than 1\");\r",
											"pm.expect(pm.response.json().message).contain(\"month must be an integer number\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be greater than 2030\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be less than 2000\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/dashboard-overview",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"dashboard-overview"
									],
									"query": [
										{
											"key": "month",
											"value": "5",
											"disabled": true
										},
										{
											"key": "year",
											"value": "2023",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Overview With month only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 Bad Request\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response message should be\", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be greater than 2030\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must not be less than 2000\");\r",
											"pm.expect(pm.response.json().message).contain(\"year must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/dashboard-overview?month=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"dashboard-overview"
									],
									"query": [
										{
											"key": "month",
											"value": "5"
										},
										{
											"key": "year",
											"value": "2023",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.Mentor Details",
					"item": [
						{
							"name": "Mentor Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 200 OK\",function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" Verify Response should content\",function(){",
											"    pm.expect(pm.response.json()).to.have.keys([\"mentor\",\"school_list\",\"home_overview\",\"examiner_cycle_details\",\"app_actions\"]);",
											"});",
											"",
											"pm.test(\" Verify mentor {} Response should content\",function(){",
											"    pm.expect(pm.response.json().mentor).to.have.keys([",
											"        \"id\",\"designation_id\",\"district_id\",\"block_id\",\"officer_name\",\"phone_no\",\"actor_id\",\"teacher_school_list_mapping\",\"district_name\",\"block_town_name\"",
											"    ]);",
											"});",
											"",
											"pm.test(\"Verify mentor.teacher_school_list_mapping Response should content\",function(){",
											"    pm.expect(pm.response.json().mentor.teacher_school_list_mapping.school_list).to.have.keys([",
											"        \"district_id\",\"block_id\",\"nyay_panchayat_id\",\"udise\",\"lat\",\"long\",\"geo_fence_enabled\",\"school_id\",\"school_name\",\"district_name\",\"block_name\",\"nyay_panchayat_name\"",
											"    ]);",
											"});",
											"",
											"pm.test(\" Verify school list [] Response should exist this properties\",function(){",
											"    pm.expect(pm.response.json().school_list[0]).to.have.keys([",
											"        \"school_id\",\"school_name\",\"udise\",\"district_id\",\"district_name\",\"block_id\",\"block_name\",\"nyay_panchayat_id\",\"nyay_panchayat_name\",\"is_visited\",\"lat\",\"long\",\"geo_fence_enabled\"",
											"    ]);",
											"});",
											"",
											"pm.test(\" Verify home_overview Response should content this properties\",function(){",
											"    pm.expect(pm.response.json().home_overview).to.have.keys([",
											"        \"visited_schools\",\"total_assessments\",\"average_assessment_time\",\"grades\",\"teacher_overview\"",
											"    ]);",
											"});",
											"",
											"pm.test(\" Verify home_overview.grade[] Response should content this properties\",function(){",
											"    pm.expect(pm.response.json().home_overview.grades[0]).to.have.keys([",
											"        \"grade\",\"total_assessments\"",
											"    ]);",
											"});",
											"",
											"pm.test(\" Verify home_overview.grade[] Response should content this properties\",function(){",
											"    pm.expect(pm.response.json().home_overview.grades[0]).to.have.keys([",
											"        \"grade\",\"total_assessments\"",
											"    ]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"details"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.Mentor detail v2 API",
					"item": [
						{
							"name": "v2/mentor/details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with mentor property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('mentor');",
											"});",
											"",
											"pm.test(\"Response is an object with school_list property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('school_list');",
											"});",
											"",
											"pm.test(\"Response is an object with home_overview property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('home_overview');",
											"});",
											"",
											"pm.test(\"Response is an object with app_actions property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('app_actions');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3MzcyMDg0NDQsImlhdCI6MTcwNTY3MjQ0NCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiJmYWViMjBmMS1mNjJhLTRkNzktODQ0NC1lMTAzZDlhZWFlZTEiLCJqdGkiOiJjYjY3YTc1MC02MjUxLTQxZTgtYTQzMS00NTJjMDcyZGIwYTkiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJSRUZSRVNIX1RPS0VOIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiODkyODI5NTAwNSIsImFwcGxpY2F0aW9uSWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJyb2xlcyI6W10sImF1dGhfdGltZSI6MTcwNTY2NzU4Miwic2lkIjoiZjQ4NzEyZmUtZTUzYy00ZjFhLWEwZDItZmJmMzkzNDZmYjBmIiwiaHR0cHM6Ly9oYXN1cmEuaW8vand0L2NsYWltcyI6eyJ4LWhhc3VyYS1hbGxvd2VkLXJvbGVzIjpbIk9wZW5Sb2xlIiwiRElFVCIsIm1hbmF2X3NhbXBhZGEiXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiRElFVCIsIlgtSGFzdXJhLVVzZXItSWQiOiI4OTI4Mjk1MDA1In0sImFwaVJvbGVzIjpbIkRJRVQiXX0.tfxbXl3xhIzm--htvDAn40fbzxRL9Xd2PqqPLbGQygH3cNQhi4uBAAALIc51rzTZwo7xjcnw2izgZ2BaKB_YgHQQk3RNF3o2uM9MMKqBLhYXn2x3lkllH638iP6hMtaNu1L7J_Zt_UK665ZCwHHqKcom-vuVFC6-2We9jdr8EF_FS8l0qLIRRI8XQ3r5rsKuGqpvcLSDye8IPS3SG9AuGPklKNgF6-S8KK1Gk8XyJSDP7Eslw4Ocn2rjJtyF73Kh05V2x6jo9ElAH7IFqRU-7UIHxuYSAFrrY6usl_y9P2_3yNBuw2lIrT5jK2P4Q_rd2YXwHiGOWbRK4H7ynOq77g"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "AC2001"
									},
									{
										"key": "deviceManufacturer",
										"value": "OnePlus"
									},
									{
										"key": "deviceVersion",
										"value": "33"
									},
									{
										"key": "appVersionCode",
										"value": "202021"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2.1"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/mentor/details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"mentor",
										"details"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.Metadata",
					"item": [
						{
							"name": "Metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\" Verify Response should be 200 OK\",function(){",
											"pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" Verify Response should content\",function(){",
											"     pm.expect(pm.response.json()).to.have.keys([",
											"         \"actors\",\"designations\",\"subjects\",\"assessment_types\",\"competency_mapping\",\"workflow_ref_ids\"",
											"])});",
											"",
											"",
											"pm.test(\" Verify the 'actors' array should contain the expected data\", function () {",
											"   const expectedActors =  [",
											"  {",
											"    \"id\": 3,",
											"    \"name\": \"teacher\"",
											"  },",
											"  {",
											"    \"id\": 1,",
											"    \"name\": \"mentor\"",
											"  },",
											"  {",
											"    \"id\": 2,",
											"    \"name\": \"examiner\"",
											"  },",
											"  {",
											"    \"id\": 4,",
											"    \"name\": \"Diet Mentor\"",
											"  },",
											"  {",
											"    \"id\": 5,",
											"    \"name\": \"Parent\"",
											"  },",
											"  {",
											"    \"id\": 0,",
											"    \"name\": \"Null\"",
											"  }",
											"];",
											"  pm.expect(pm.response.json().actors).to.eql(expectedActors);",
											"});",
											"",
											"const expectedDesignations = [",
											"  {",
											"    \"id\": 1,",
											"    \"name\": \"examiner\"",
											"  },",
											"  {",
											"    \"id\": 2,",
											"    \"name\": \"TSPL\"",
											"  },",
											"  {",
											"    \"id\": 3,",
											"    \"name\": \"S.R. G\"",
											"  },",
											"  {",
											"    \"id\": 4,",
											"    \"name\": \"Prinicipal Secretary\"",
											"  },",
											"  {",
											"    \"id\": 5,",
											"    \"name\": \"Diet Mentor\"",
											"  },",
											"  {",
											"    \"id\": 6,",
											"    \"name\": \"teacher\"",
											"  },",
											"  {",
											"    \"id\": 7,",
											"    \"name\": \"ARP\"",
											"  },",
											"  {",
											"    \"id\": 8,",
											"    \"name\": \"TEST\"",
											"  },",
											"  {",
											"    \"id\": 9,",
											"    \"name\": \"SRG\"",
											"  },",
											"  {",
											"    \"id\": 10,",
											"    \"name\": \"ARP NAGAR\"",
											"  }",
											"];",
											"",
											"",
											"pm.test(\"Test 245 Verify response should contain the 'designations' array\", function () {",
											"  pm.expect(pm.response.json().designations).to.exist;",
											"  pm.expect(pm.response.json().designations).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Test 246 Verify the 'designations' array should not be empty\", function () {",
											"  pm.expect(pm.response.json().designations).to.have.length.above(0);",
											"});",
											"",
											"",
											"pm.test(\"Test 247 Verify the 'designations' array should contain the expected data\", function () {",
											"  pm.expect(pm.response.json().designations).to.eql(expectedDesignations);",
											"});",
											"",
											"const expectedSubjects = [",
											"  {",
											"    \"id\": 1,",
											"    \"name\": \"Math\"",
											"  },",
											"  {",
											"    \"id\": 2,",
											"    \"name\": \"Hindi\"",
											"  },",
											"  {",
											"    \"id\": 3,",
											"    \"name\": \"English\"",
											"  },",
											"  {",
											"    \"id\": 0,",
											"    \"name\": \"NULL\"",
											"  }",
											"];",
											"",
											"pm.test(\"Test 248 Verify response should contain the 'subjects' array\", function () {",
											"  pm.expect(pm.response.json().subjects).to.exist;",
											"  pm.expect(pm.response.json().subjects).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Test 249 Verify the 'subjects' array should not be empty\", function () {",
											"  pm.expect(pm.response.json().subjects).to.have.length.above(0);",
											"});",
											"",
											"pm.test(\"Test 250 Verify the 'subjects' array should contain the expected data\", function () {",
											"  pm.expect(pm.response.json().subjects).to.eql(expectedSubjects);",
											"});",
											"",
											"const expectedAssessmentTypes = [",
											"  {",
											"    \"id\": 1,",
											"    \"name\": \"nipun_abhyas\"",
											"  },",
											"  {",
											"    \"id\": 2,",
											"    \"name\": \"suchi_abhyas\"",
											"  },",
											"  {",
											"    \"id\": 3,",
											"    \"name\": \"nipun_lakshya\"",
											"  },",
											"  {",
											"    \"id\": 4,",
											"    \"name\": \"nipun_suchi\"",
											"  },",
											"  {",
											"    \"id\": 5,",
											"    \"name\": \"state_led_assessment\"",
											"  }",
											"];",
											"",
											"",
											"pm.test(\"Verify response should contain the 'assessment_types' array\", function () {",
											"  pm.expect(pm.response.json().assessment_types).to.exist;",
											"  pm.expect(pm.response.json().assessment_types).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Verify the 'assessment_types' array should not be empty\", function () {",
											"  pm.expect(pm.response.json().assessment_types).to.have.length.above(0);",
											"});",
											"",
											"",
											"pm.test(\"Verify the 'assessment_types' array should contain the expected data\", function () {",
											"  pm.expect(pm.response.json().assessment_types).to.eql(expectedAssessmentTypes);",
											"});",
											"",
											"pm.test(\" Verify test Verify competency_mapping [] should content\",function(){",
											"     pm.expect(pm.response.json().competency_mapping[0]).to.have.keys([",
											"         \"grade\",\"learning_outcome\",\"competency_id\",\"flow_state\",\"subject_id\"",
											"])});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/metadata",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"metadata"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11.School Students",
					"item": [
						{
							"name": "School Students",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 200 OK\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response should contain 53 students\",function(){\r",
											"pm.expect(pm.response.json()).to.not.empty\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response Each student should have id,name,grade, roll_no properties\", \r",
											"function () {\r",
											"const students = pm.response.json();\r",
											"students.forEach(student => {\r",
											"pm.expect(student).to.have.property('id');\r",
											"pm.expect(student).to.have.property('name');\r",
											"pm.expect(student).to.have.property('grade');\r",
											"pm.expect(student).to.have.property('roll_no');\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response All grades should be either 1,2,3\", function() {\r",
											"pm.expect(pm.response.json().every(student => [1,2,3].includes(student.grade))).to.\r",
											"be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response is in JSON format\", function () {\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response of Data Types\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"jsonData.forEach(function(student){\r",
											"var idString =student.id; \r",
											"var idNumber = parseFloat(idString);\r",
											"var isNumeric = !isNaN(idNumber) && isFinite(idNumber);\r",
											"pm.expect(isNumeric).to.be.true;\r",
											"pm.expect(typeof student.id).to.eql(\"string\");\r",
											"pm.expect(typeof student.name).to.eql(\"string\");\r",
											"pm.expect(typeof student.grade).to.eql(\"number\");\r",
											"pm.expect(typeof student.roll_no).to.eql(\"number\");\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"Test Verify response of All roll_no are four-digit numbers\", () => \r",
											"pm.response.json().forEach(item => pm.expect(item.roll_no.toString().length).to.equal(4)));\r",
											"\r",
											"pm.test(\"Test Verify response of Rollno,ID,grade in Numeric Values\", () => {\r",
											"pm.response.json().forEach(item => {\r",
											"pm.expect(item.roll_no,item.id,item.grade).to.be.a('number');\r",
											"});\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token-here}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9430109201/students",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9430109201",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid UDISE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token-here}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/943010201/students",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"943010201",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode property\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('statusCode');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token-here}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9430109201/students",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9430109201",
										"students"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "13.School Performance summary",
					"item": [
						{
							"name": "School Performance Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Verify Response should be 200 OK\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Test Verify Response should contain 3 \",function(){\r",
											"    pm.expect(pm.response.json()).to.have.lengthOf(3);\r",
											"});\r",
											"\r",
											"pm.test(\"Test Verify response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token-here}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9430109201/students/result/summary?grade=1%2C2%2C3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9430109201",
										"students",
										"result",
										"summary"
									],
									"query": [
										{
											"key": "grade",
											"value": "1%2C2%2C3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token-here}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9430109201/students/result/summary?grade=1%2C2%2C3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9430109201",
										"students",
										"result",
										"summary"
									],
									"query": [
										{
											"key": "grade",
											"value": "1%2C2%2C3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without params : School Performance Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check 'statusCode' property\", function () {\r",
											"    pm.response.to.have.jsonBody('statusCode');\r",
											"    pm.expect(pm.response.json().statusCode).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check 'message' property\", function () {\r",
											"    pm.response.to.have.jsonBody('message');\r",
											"    pm.expect(pm.response.json().message).to.be.a('string').and.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check 'error' property\", function () {\r",
											"    pm.response.to.have.jsonBody('error');\r",
											"    pm.expect(pm.response.json().error).to.be.a('string').and.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token-here}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9430109201/students/result/summary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9430109201",
										"students",
										"result",
										"summary"
									],
									"query": [
										{
											"key": "grade",
											"value": "1%2C2%2C3",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "14.School (Teacher) Performance",
					"item": [
						{
							"name": "School (Teacher) Performance Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Verify Response should be 200 OK\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Test Verify Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Test Verify Response array length is 3\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.length(3);\r",
											"});\r",
											"\r",
											"pm.test(\"Test Verify Response is an array with at least one element\",function (){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData).to.be.an('array');\r",
											"pm.expect(jsonData.length).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Test Verify Response contains Nipun students & Assessed students\",() => \r",
											"pm.expect(pm.response.json().flatMap(item => item.insights.map(insight => insight.\r",
											"label))).to.include.members([\"Nipun students\",\"Assessed students\"]));\r",
											"\r",
											"\r",
											"pm.test(\"Property `period` exists\", () => {\r",
											"  pm.expect(pm.response.json()[0]).to.have.property(\"period\");\r",
											"});\r",
											"\r",
											"pm.test(\"Property `insights` exists\", () => {\r",
											"  pm.expect(pm.response.json()[0]).to.have.property(\"insights\");\r",
											"});\r",
											"\r",
											"pm.test(\"Property `label` exists\", () => {\r",
											"  pm.expect(pm.response.json()[0].insights[0]).to.have.property(\"label\");\r",
											"});\r",
											"\r",
											"pm.test(\"Property `count` exists\", () => {\r",
											"  pm.expect(pm.response.json()[0].insights[0]).to.have.property(\"count\");\r",
											"});\r",
											"\r",
											"pm.test(\"Property `period` exists\", () => {\r",
											"  pm.expect(pm.response.json()[0]).to.have.property(\"period\");\r",
											"});\r",
											"\r",
											"pm.test(\"Property `insights` exists\", () => {\r",
											"  pm.expect(pm.response.json()[0]).to.have.property(\"insights\");\r",
											"});\r",
											"\r",
											"pm.test(\"Properties `label` and `count` exist for each item in the `insights` array\", () => {\r",
											"  pm.response.json()[0].insights.forEach(insight => {\r",
											"    pm.expect(insight).to.have.property(\"label\");\r",
											"    pm.expect(insight).to.have.property(\"count\");\r",
											"  });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token-here}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9430109201/teacher/performance/insights",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9430109201",
										"teacher",
										"performance",
										"insights"
									]
								}
							},
							"response": []
						},
						{
							"name": "School (Teacher) Performance Summary Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token-here}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9430109201/teacher/performance/insights",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9430109201",
										"teacher",
										"performance",
										"insights"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Examiner flow",
			"item": [
				{
					"name": "Auth V2",
					"item": [
						{
							"name": "Send OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// If response providerResponseCode==null",
											"",
											"if(pm.response.json().status.providerResponseCode==null)",
											"{",
											"    pm.test(\"Verify Response should be 201 OK\",function(){",
											"    pm.response.to.have.status(201);",
											"    });",
											"",
											"    pm.test(\"Verify provider is Gupshup\", function() {",
											"    pm.expect(pm.response.json().status.provider).to.exist;",
											"    pm.expect(pm.response.json().status.provider).to.eql(\"Gupshup\");",
											"     });",
											"",
											"    pm.test(\" Verify the Response body should contain the expected fields and values \",function(){",
											"    pm.response.to.have.jsonBody({",
											"        \"status\": {",
											"            \"provider\": \"Gupshup\",",
											"            \"phone\": \"7982057360\",",
											"            \"networkResponseCode\": 0,",
											"            \"messageID\": \"\",",
											"            \"error\": null,",
											"            \"providerResponseCode\": null,",
											"            \"providerSuccessResponse\": \"\",",
											"            \"status\": \"\"",
											"        }",
											"        });",
											"    });",
											"",
											"    pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"    });",
											"",
											"    pm.test(\"Provider field should not be empty\", function () {",
											"  const responseData = pm.response.json();",
											"    pm.expect(responseData.status.provider).to.exist.and.to.not.be.empty;",
											"    });",
											"",
											"    pm.test(\"NetworkResponseCode is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.networkResponseCode).to.be.a('number').and.to.satisfy((num) => num >= 0, \"NetworkResponseCode should be a non-negative integer\");",
											"     });",
											"    pm.test(\"MessageID is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.messageID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"MessageID should not be empty\");",
											"    });",
											"    pm.test(\"Error field should be either null or a non-empty string\", function () {",
											"     const responseData = pm.response.json();",
											"  ",
											"     pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.error).to.satisfy((error) => error === null || typeof error === 'string' && error.length > 0);",
											"     });",
											"",
											"}",
											"",
											"",
											"// If response providerResponseCode==null",
											"",
											"if(pm.response.json().status.providerResponseCode==308)",
											"{",
											"   pm.test(\" Verify Response should be 201 OK\",function(){",
											"   pm.response.to.have.status(201);",
											"    });",
											"   pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"   });",
											"   pm.test(\"Provider field should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.provider).to.exist.and.to.not.be.empty;",
											"   });",
											"   pm.test(\"Network response code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status.networkResponseCode).to.be.a('number');",
											"    pm.expect(responseData.status.networkResponseCode).to.be.at.least(0);",
											"   });",
											"   pm.test(\"Error object should have errorText and errorCode fields\", function () {",
											"    const responseData = pm.response.json().status;",
											"    pm.expect(responseData.error).to.exist;",
											"    pm.expect(responseData.error.errorText).to.exist;",
											"    pm.expect(responseData.error.errorCode).to.exist;",
											"   });",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/sendOTP?phone={{examiner_phone}}&errorMessage=Mobile%20number%20could%20not%20be%20verified.%20Please%20get%20in%20touch%20with%20the%20DC%20in%20your%20District%27s%20BSA%20office%20if%20your%20number%20is%20not%20registered%20on%20the%20Prerna%20Portal.",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{examiner_phone}}"
										},
										{
											"key": "errorMessage",
											"value": "Mobile%20number%20could%20not%20be%20verified.%20Please%20get%20in%20touch%20with%20the%20DC%20in%20your%20District%27s%20BSA%20office%20if%20your%20number%20is%20not%20registered%20on%20the%20Prerna%20Portal."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var jsonData = pm.response.json();",
											"// var extractedToken = jsonData.token;",
											"",
											"// // Set the environment variable",
											"// pm.environment.set(\"token\", jsonData.result.data.user.token);",
											"",
											"",
											"// using old auth for now",
											"",
											"",
											"",
											"pm.test(\"Verify Response should be 201 OK\", function(){",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\" Verify Response code is OK\", function() {",
											"    pm.expect(pm.response.json().responseCode).to.equal(\"OK\");",
											"});",
											"",
											"pm.test(\" Verify in Params exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().params).to.have.keys(\"responseMsgId\", \"msgId\", \"err\", \"status\", \"errMsg\");",
											"});",
											"",
											"pm.test(\" Verify ts property should exists\", function() {",
											"    pm.expect(pm.response.json().ts).to.exist;",
											"});",
											"",
											"pm.test(\" Verify ID property should be exist \", function() {",
											"    pm.expect(pm.response.json().id).to.exist;",
											"});",
											"",
											"pm.test(\" Verify result should be exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result).to.have.keys(\"responseMsg\",\"accountStatus\",\"data\");",
											"});",
											"",
											"pm.test(\" Verify Data exists and has the correct property\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.exist;",
											"});",
											"",
											"pm.test(\" Verify User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.have.keys(\"refreshToken\", \"refreshTokenId\", \"token\", \"tokenExpirationInstant\", \"user\");",
											"});",
											"",
											"pm.test(\" User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user).to.have.keys(",
											"                    \"active\",",
											"                    \"connectorId\",",
											"                    \"data\",",
											"                    \"fullName\",",
											"                    \"id\",",
											"                    \"insertInstant\",",
											"                    \"lastLoginInstant\",",
											"                    \"lastUpdateInstant\",",
											"                    \"memberships\",",
											"                    \"mobilePhone\",",
											"                    \"passwordChangeRequired\",",
											"                    \"passwordLastUpdateInstant\",",
											"                    \"preferredLanguages\",",
											"                    \"registrations\",",
											"                    \"tenantId\",",
											"      \"twoFactor\",",
											"       \"uniqueUsername\",",
											"                    \"username\",",
											"                    \"usernameStatus\",",
											"                    \"verified\"",
											"       ",
											"    );",
											"});",
											"",
											"pm.test(\" Verify registrations exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0]).to.have.keys(",
											"        \"applicationId\",",
											"        \"data\",",
											"        \"id\",",
											"        \"insertInstant\",",
											"        \"lastLoginInstant\",",
											"        \"lastUpdateInstant\",",
											"        \"preferredLanguages\",",
											"        \"roles\",",
											"        \"tokens\",",
											"        \"username\",",
											"        \"usernameStatus\",",
											"        \"verified\"",
											"    );",
											"});",
											"",
											"pm.test(\" Verify Response should contain phone number\", function(){",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0].username).to.contain(\"9970821336\");",
											"});",
											"",
											"pm.test(\"Verify response of usernameStatus should be ACTIVE\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.usernameStatus).to.equal(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/verifyOTP?phone={{mentor_phone}}&otp=0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{mentor_phone}}"
										},
										{
											"key": "otp",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1. Send Otp",
					"item": [
						{
							"name": "Send OTP valid scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json().status.providerResponseCode==308){\r",
											"\r",
											"    pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response is an object with status property\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('status');\r",
											"    });\r",
											"    pm.test(\"Provider property exists in the response status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.have.property('provider');\r",
											"    });\r",
											"\r",
											"\r",
											"     pm.test(\"Phone property exists in the response status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.be.an('object');\r",
											"    pm.expect(responseData.status.phone).to.exist;\r",
											"      });\r",
											"\r",
											"\r",
											"    pm.test(\"Network response code should exist in the status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.exist;\r",
											"    pm.expect(responseData.status.networkResponseCode).to.exist;\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Error property exists in the response status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status.error).to.exist;\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Provider response code should exist in the status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.be.an('object');\r",
											"    pm.expect(responseData.status.providerResponseCode).to.exist;\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"if(pm.response.json().status.providerResponseCode==null){\r",
											"    pm.test(\"Verify Response should be 200 OK\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify response provider is Gupshup\", function() { \r",
											"    pm.expect(pm.response.json().status.provider).to.exist;\r",
											"    pm.expect(pm.response.json().status.provider).to.eql(\"Gupshup\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify Response should contain phone number\",function(){\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"examiner_phone\"))\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify network Response Code is 200\", function() {\r",
											"    pm.expect(pm.response.json().status.networkResponseCode).to.eql(200);\r",
											"    pm.expect(pm.response.json().status.providerSuccessResponse).to.satisfy(function(responseText) {\r",
											"        return responseText.includes(\"OTP re-sent\") || responseText.includes(\"OTP sent\") \r",
											"        || responseText.includes(\"Old OTP expired. New OTP generated and re-sent.\"); \r",
											"    })\r",
											"    });\r",
											"    pm.test(\"Verify Response should contain messageID\",function(){\r",
											"      pm.expect(pm.response.text()).to.include(\"messageID\")\r",
											"    });\r",
											"\r",
											"    pm.test(\" Verify provider Response Code\",function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"providerResponseCode\");\r",
											"    pm.expect(pm.response.json().status.networkResponseCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify Response should contain status\", function() {\r",
											"    pm.expect(pm.response.json().status.status).to.eql('success');\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/sendOTP?phone={{examiner_phone}}&errorMessage=Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal.",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{examiner_phone}}"
										},
										{
											"key": "errorMessage",
											"value": "Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send OTP with error message only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status code should be 400\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"pm.test(\"Verify Response should contain message\",function(){\r",
											"        pm.expect(pm.response.json().message).to.exist;\r",
											"        pm.expect(pm.response.text()).to.include(\"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string.\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should be exist Bad Request \", function() {\r",
											"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");\r",
											"    pm.expect(pm.response.json().error).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{user-service}}/api/sendOTP?errorMessage=Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal.",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "8928256445145",
											"disabled": true
										},
										{
											"key": "errorMessage",
											"value": "Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send OTP without params.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status code should be 400\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"pm.test(\" Verify Response should contain message phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string\",function(){\r",
											"        pm.expect(pm.response.json().message).to.exist;\r",
											"        pm.expect(pm.response.text()).to.include(\"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string.\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should be exist Bad Request\", function() {\r",
											"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");\r",
											"    pm.expect(pm.response.json().error).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{user-service}}/api/sendOTP",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"sendOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "79820573609000000",
											"disabled": true
										},
										{
											"key": "errorMessage",
											"value": "Mobile number could not be verified. Please get in touch with the DC in your District's BSA office if your number is not registered on the Prerna Portal.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2. Verify Otp",
					"item": [
						{
							"name": "Verify OTP valid scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 200 OK\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify provider is Gupshup\", function() {\r",
											"    pm.expect(pm.response.json().status.provider).to.exist;\r",
											"    pm.expect(pm.response.json().status.provider).to.eql(\"Gupshup\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Response body should contain the expected fields and values \",function(){\r",
											"    pm.response.to.have.jsonBody({\r",
											"        \"status\": {\r",
											"            \"provider\": \"Gupshup\",\r",
											"            \"phone\": \"7982057360\",\r",
											"            \"networkResponseCode\": 0,\r",
											"            \"messageID\": \"\",\r",
											"            \"error\": null,\r",
											"            \"providerResponseCode\": null,\r",
											"            \"providerSuccessResponse\": \"\",\r",
											"            \"status\": \"\"\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify providerSuccessResponse field value\", function () {\r",
											"    const expectedSuccessResponse = \"OTP matched.\";\r",
											"    pm.response.to.have.jsonBody(\"status.providerSuccessResponse\", expectedSuccessResponse);\r",
											"});\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Provider field should not be empty\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  pm.expect(responseData.status.provider).to.exist.and.to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"NetworkResponseCode is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status.networkResponseCode).to.be.a('number').and.to.satisfy((num) => num >= 0, \"NetworkResponseCode should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"MessageID is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status.messageID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"MessageID should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field should be either null or a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.status.error).to.satisfy((error) => error === null || typeof error === 'string' && error.length > 0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?phone={{examiner_phone}}&otp=0000",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{examiner_phone}}"
										},
										{
											"key": "otp",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP correct phone no. wrong otp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response should contain message\", function() {\r",
											"    pm.expect(pm.response.json().message).to.exist;\r",
											"    pm.expect(pm.response.json().message).to.contain(\"phone must be a valid phone number\");\r",
											"});\r",
											"pm.test(\" Verify Response error should be Bad Request\",function(){\r",
											"pm.expect(pm.response.text()).to.include(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?phone=7982057322222&otp=9104",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "7982057322222"
										},
										{
											"key": "otp",
											"value": "9104"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP with phone no. only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify response status should be 400 is\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Test 26 Verify message Response should be otp must be shorter than or equal to 10 characters,otp should not be empty,otp must be a string\",function(){\r",
											"pm.expect(pm.response.json().message).to.contain(\"otp must be shorter than or equal to 10 characters\",\r",
											"        \"otp should not be empty\",\r",
											"        \"otp must be a string\")\r",
											"});\r",
											"\r",
											"pm.test(\"Test 27 Verify error response should be bad request\", function(){\r",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?phone={{examiner_phone}}",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "{{examiner_phone}}"
										},
										{
											"key": "otp",
											"value": "9104",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP with otp only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response status should be 400 is\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Test 30 Verify message Response should be phone must be a valid phone number,phone should not be empty,phone must be a string\",function(){\r",
											"pm.expect(pm.response.json().message).to.contain(\"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string\")\r",
											"});\r",
											"\r",
											"pm.test(\"Test 31 Verify error response should be bad request\", function(){\r",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP?otp=9104",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "7982057360",
											"disabled": true
										},
										{
											"key": "otp",
											"value": "9104"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify OTP without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify response status should be 400 is\", function() {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message Response should contain text \",function(){\r",
											"pm.expect(pm.response.json().message).to.contain( \"phone must be a valid phone number\",\r",
											"        \"phone should not be empty\",\r",
											"        \"phone must be a string\",\r",
											"        \"otp must be shorter than or equal to 10 characters\",\r",
											"        \"otp should not be empty\",\r",
											"        \"otp must be a string\")\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error response should be bad request\", function(){\r",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-application-id",
										"value": "320b020a-3d84-4d8a-a191-da4e972c2951",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user-service}}/api/verifyOTP",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"verifyOTP"
									],
									"query": [
										{
											"key": "phone",
											"value": "9640863206",
											"disabled": true
										},
										{
											"key": "otp",
											"value": "9104",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3. Login",
					"item": [
						{
							"name": "Login Valid Scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var extractedToken = jsonData.token;",
											"",
											"// Set the environment variable",
											"pm.environment.set(\"token\", jsonData.result.data.user.token);",
											"pm.collectionVariables.set(\"token\", jsonData.result.data.user.token);",
											"",
											"",
											"pm.test(\" Verify Response should be 201 OK\", function(){",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify Response code is OK\", function() {",
											"    pm.expect(pm.response.json().responseCode).to.equal(\"OK\");",
											"});",
											"",
											"pm.test(\" Verify in Params exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().params).to.have.keys(\"responseMsgId\", \"msgId\", \"err\", \"status\", \"errMsg\");",
											"});",
											"",
											"pm.test(\"Verify ts property should exists\", function() {",
											"    pm.expect(pm.response.json().ts).to.exist;",
											"});",
											"",
											"pm.test(\"Verify ID property should be exist \", function() {",
											"    pm.expect(pm.response.json().id).to.exist;",
											"});",
											"",
											"pm.test(\"Verify result should be exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result).to.have.keys(\"responseMsg\",\"accountStatus\",\"data\");",
											"});",
											"",
											"pm.test(\"Verify Data exists and has the correct property\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.exist;",
											"});",
											"",
											"pm.test(\"Verify User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user).to.have.keys(\"refreshToken\", \"refreshTokenId\", \"token\", \"tokenExpirationInstant\", \"user\");",
											"});",
											"",
											"pm.test(\" User exists and has the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user).to.have.keys(",
											"                    \"active\",",
											"                    \"connectorId\",",
											"                    \"data\",",
											"                    \"fullName\",",
											"                    \"id\",",
											"                    \"insertInstant\",",
											"                    \"lastLoginInstant\",",
											"                    \"lastUpdateInstant\",",
											"                    \"memberships\",",
											"                    \"mobilePhone\",",
											"                    \"passwordChangeRequired\",",
											"                    \"passwordLastUpdateInstant\",",
											"                    \"preferredLanguages\",",
											"                    \"registrations\",",
											"                    \"tenantId\",",
											"      \"twoFactor\",",
											"       \"uniqueUsername\",",
											"                    \"username\",",
											"                    \"usernameStatus\",",
											"                    \"verified\"",
											"       ",
											"    );",
											"});",
											"",
											"pm.test(\"Verify registrations exist and have the correct properties\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0]).to.have.keys(",
											"        \"applicationId\",",
											"        \"data\",",
											"        \"id\",",
											"        \"insertInstant\",",
											"        \"lastLoginInstant\",",
											"        \"lastUpdateInstant\",",
											"        \"preferredLanguages\",",
											"        \"roles\",",
											"        \"tokens\",",
											"        \"username\",",
											"        \"usernameStatus\",",
											"        \"verified\"",
											"    );",
											"});",
											"",
											"pm.test(\" Verify Response should contain phone number\", function(){",
											"    pm.expect(pm.response.json().result.data.user.user.registrations[0].username).to.contain(pm.collectionVariables.get(\"examiner_phone\"));",
											"});",
											"",
											"pm.test(\"Verify response of usernameStatus should be ACTIVE\", function() {",
											"    pm.expect(pm.response.json().result.data.user.user.usernameStatus).to.equal(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@samagra123\",\n    \"loginId\": \"{{examiner_phone}}\",\n    \"applicationId\": \"320b020a-3d84-4d8a-a191-da4e972c2951\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With only login and application ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\"Verify message Response should contain text \",function(){",
											"pm.expect(pm.response.json().message).to.contain(\"password must be shorter than or equal to 100 characters\",",
											"        \"password should not be empty\",",
											"        \"password must be a string\")",
											"});",
											"",
											"pm.test(\"Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n    \"loginId\": \"{{examiner_phone}}\",\n    \"applicationId\": \"320b020a-3d84-4d8a-a191-da4e972c2951\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Without Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test 53 Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Test 54 Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\"Test 55 Verify message Response should contain text \",function(){",
											"pm.expect(pm.response.json().message).to.contain(\"loginId must be shorter than or equal to 80 characters\",",
											"        \"loginId should not be empty\",",
											"        \"loginId must be a string\",",
											"        \"password must be shorter than or equal to 100 characters\",",
											"        \"password should not be empty\",",
											"        \"password must be a string\",",
											"        \"applicationId should not be empty\",",
											"        \"applicationId must be a UUID\")",
											"});",
											"",
											"pm.test(\"Test 56 Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Without empty loginId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"  Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\" Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\"Verify message Response should contain text loginId should not be empty\",function(){",
											"pm.expect(pm.response.json().message).to.contain(\"loginId should not be empty\")",
											"});",
											"",
											"pm.test(\" Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@samagra123\",\n    \"loginId\": \"\",\n    \"applicationId\": \"320b020a-3d84-4d8a-a191-da4e972c2951\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Without Application ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\" Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\" Verify message Response should contain text\",function(){",
											"pm.expect(pm.response.json().message).to.contain( \"loginId should not be empty\",",
											"        \"applicationId should not be empty\",",
											"        \"applicationId must be a UUID\")",
											"});",
											"",
											"pm.test(\" Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@samagra123\",\n    \"loginId\": \"\",\n    \"applicationId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){",
											"pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Verify response status should be 400 is\", function() {",
											"    pm.expect(pm.response.json().statusCode).to.exist;",
											"    pm.expect(pm.response.json().statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\" Verify message Response should contain text\",function(){",
											"pm.expect(pm.response.json().message).to.contain( \"loginId should not be empty\",",
											"        \"applicationId should not be empty\",",
											"        \"applicationId must be a UUID\")",
											"});",
											"",
											"pm.test(\" Verify error response should be bad request\", function(){",
											"   pm.expect(pm.response.json().error).to.eql(\"Bad Request\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"plapp@123\",\n    \"loginId\": \"\",\n    \"applicationId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4. Mentor Details",
					"item": [
						{
							"name": "Mentor details Valid scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with mentor property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('mentor');",
											"});",
											"",
											"pm.test(\"Response is an object with school_list property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('school_list');",
											"});",
											"",
											"pm.test(\"Response is an object with home_overview property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('home_overview');",
											"});",
											"",
											"pm.test(\"Response is an object with examiner_cycle_details property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('examiner_cycle_details');",
											"});",
											"",
											"pm.test(\"Response is an object with app_actions property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('app_actions');",
											"});",
											"pm.test(\"Phone number format in the mentor object is valid\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.mentor).to.be.an('object');",
											"    pm.expect(responseData.mentor.phone_no).to.match(/^\\d{10}$/);",
											"});",
											"",
											"",
											"pm.test(\"School list array contains at least one school\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.school_list).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Geo_fence_enabled property in the school_list array should be a boolean\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.school_list).to.be.an('array');",
											"    responseData.school_list.forEach(function(school) {",
											"        pm.expect(school.geo_fence_enabled).to.be.a('boolean');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"App_actions array contains at least one action object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.app_actions).to.be.an('array');",
											"    pm.expect(responseData.app_actions.length).to.be.at.least(1, \"At least one action object should be present\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/mentor/details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"mentor",
										"details"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.Mentor detail v2 API",
					"item": [
						{
							"name": "v2/mentor/details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with mentor property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('mentor');",
											"});",
											"",
											"pm.test(\"Response is an object with school_list property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('school_list');",
											"});",
											"",
											"pm.test(\"Response is an object with home_overview property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('home_overview');",
											"});",
											"",
											"pm.test(\"Response is an object with app_actions property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('app_actions');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3MzcyMDg0NDQsImlhdCI6MTcwNTY3MjQ0NCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiJmYWViMjBmMS1mNjJhLTRkNzktODQ0NC1lMTAzZDlhZWFlZTEiLCJqdGkiOiJjYjY3YTc1MC02MjUxLTQxZTgtYTQzMS00NTJjMDcyZGIwYTkiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJSRUZSRVNIX1RPS0VOIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiODkyODI5NTAwNSIsImFwcGxpY2F0aW9uSWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJyb2xlcyI6W10sImF1dGhfdGltZSI6MTcwNTY2NzU4Miwic2lkIjoiZjQ4NzEyZmUtZTUzYy00ZjFhLWEwZDItZmJmMzkzNDZmYjBmIiwiaHR0cHM6Ly9oYXN1cmEuaW8vand0L2NsYWltcyI6eyJ4LWhhc3VyYS1hbGxvd2VkLXJvbGVzIjpbIk9wZW5Sb2xlIiwiRElFVCIsIm1hbmF2X3NhbXBhZGEiXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiRElFVCIsIlgtSGFzdXJhLVVzZXItSWQiOiI4OTI4Mjk1MDA1In0sImFwaVJvbGVzIjpbIkRJRVQiXX0.tfxbXl3xhIzm--htvDAn40fbzxRL9Xd2PqqPLbGQygH3cNQhi4uBAAALIc51rzTZwo7xjcnw2izgZ2BaKB_YgHQQk3RNF3o2uM9MMKqBLhYXn2x3lkllH638iP6hMtaNu1L7J_Zt_UK665ZCwHHqKcom-vuVFC6-2We9jdr8EF_FS8l0qLIRRI8XQ3r5rsKuGqpvcLSDye8IPS3SG9AuGPklKNgF6-S8KK1Gk8XyJSDP7Eslw4Ocn2rjJtyF73Kh05V2x6jo9ElAH7IFqRU-7UIHxuYSAFrrY6usl_y9P2_3yNBuw2lIrT5jK2P4Q_rd2YXwHiGOWbRK4H7ynOq77g"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "AC2001"
									},
									{
										"key": "deviceManufacturer",
										"value": "OnePlus"
									},
									{
										"key": "deviceVersion",
										"value": "33"
									},
									{
										"key": "appVersionCode",
										"value": "202021"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2.1"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/mentor/details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"mentor",
										"details"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6. Metadata API",
					"item": [
						{
							"name": "Metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for response status code",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for the existence of properties in the response",
											"pm.test(\"Response is an object with actors, designations, subjects, assessment_types, competency_mapping, and workflow_ref_ids properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('actors', 'designations', 'subjects', 'assessment_types', 'competency_mapping', 'workflow_ref_ids');",
											"});",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the actors array and ensure each object has id and name properties\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.actors).to.be.an('array');",
											"    responseData.actors.forEach(function(actor) {",
											"        pm.expect(actor).to.have.property('id').that.is.a('number');",
											"        pm.expect(actor).to.have.property('name').that.is.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Designations array objects should have id and name properties\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.designations).to.be.an('array');",
											"    responseData.designations.forEach(function(designation) {",
											"        pm.expect(designation).to.have.property('id');",
											"        pm.expect(designation).to.have.property('name');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Subjects array objects must have id and name properties\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.subjects).to.be.an('array');",
											"    ",
											"    responseData.subjects.forEach(function(subject) {",
											"        pm.expect(subject).to.have.property('id');",
											"        pm.expect(subject).to.have.property('name');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Validate assessment_types array for id and name properties\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.assessment_types).to.be.an('array');",
											"    responseData.assessment_types.forEach(function (assessment) {",
											"        pm.expect(assessment).to.have.property('id');",
											"        pm.expect(assessment).to.have.property('name');",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/metadata",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"metadata"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7.Performance Insights",
					"item": [
						{
							"name": "Valid Scenario Performance insights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array of objects with cycle_id, period, updated_at, and insights properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
											"    jsonData.forEach(function(item) {",
											"        pm.expect(item).to.be.an('object').that.has.all.keys('cycle_id', 'period', 'updated_at', 'insights');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/examiner/performance/insights?cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"examiner",
										"performance",
										"insights"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response has statusCode property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('statusCode');",
											"});",
											"",
											"pm.test(\"Response has message property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Response has error property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/examiner/performance/insights?cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"examiner",
										"performance",
										"insights"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cycle ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});  ",
											"",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/examiner/performance/insights?cycle_id=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"examiner",
										"performance",
										"insights"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('statusCode');",
											"});",
											"",
											"pm.test(\"Response is an object with message property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('message');",
											"});",
											"",
											"pm.test(\"Response is an object with error property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('error');",
											"});",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"StatusCode property is a non-zero integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.statusCode).to.exist;",
											"  pm.expect(responseData.statusCode).to.be.a('number');",
											"  pm.expect(responseData.statusCode).to.not.equal(0, \"StatusCode should be a non-zero integer\");",
											"});",
											"",
											"",
											"pm.test(\"Message property is an array and not empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Message array should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Error property should be a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/examiner/performance/insights",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"examiner",
										"performance",
										"insights"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "13",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8. School Status",
					"item": [
						{
							"name": "Valid scenario - School status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array of objects with udise, status, and updated_at properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(school) {",
											"        pm.expect(school).to.be.an('object').that.has.all.keys('udise', 'status', 'updated_at');",
											"    });",
											"});",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/status?cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"status"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/status?cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"status"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cycle ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('statusCode');",
											"});",
											"pm.test(\"Response is an object with message property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('message');",
											"});",
											"pm.test(\"Response is an object with error property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/status?cycle_id=1399",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"status"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "1399"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"status"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "13",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9. Students",
					"item": [
						{
							"name": "Valid scenario - Student list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array of objects with id, name, grade, and roll_no properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
											"    pm.response.json().forEach(function(student) {",
											"        pm.expect(student).to.have.property('id');",
											"        pm.expect(student).to.have.property('name');",
											"        pm.expect(student).to.have.property('grade');",
											"        pm.expect(student).to.have.property('roll_no');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/students",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/students",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid UDISE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/91502044230/students",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"91502044230",
										"students"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10. Student Results",
					"item": [
						{
							"name": "Valid Scenario - Student Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array of objects\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
											"    pm.response.json().forEach(function(studentResult) {",
											"        pm.expect(studentResult).to.be.an('object').that.has.property('grade');",
											"        pm.expect(studentResult).to.have.property('period');",
											"        pm.expect(studentResult).to.have.property('summary');",
											"        pm.expect(studentResult).to.have.property('students');",
											"        studentResult.summary.forEach(function(summaryItem) {",
											"            pm.expect(summaryItem).to.have.property('label');",
											"            pm.expect(summaryItem).to.have.property('colour');",
											"            pm.expect(summaryItem).to.have.property('count');",
											"            pm.expect(summaryItem).to.have.property('identifier');",
											"        });",
											"        studentResult.students.forEach(function(student) {",
											"            pm.expect(student).to.have.property('id');",
											"            pm.expect(student).to.have.property('status');",
											"            pm.expect(student).to.have.property('last_assessment_date');",
											"        });",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/students/result?grade=1%2C2%2C3&cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"students",
										"result"
									],
									"query": [
										{
											"key": "grade",
											"value": "1%2C2%2C3"
										},
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/students/result?grade=1%2C2%2C3&cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"students",
										"result"
									],
									"query": [
										{
											"key": "grade",
											"value": "1%2C2%2C3"
										},
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Scenario - Only Grade 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array of objects\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
											"    pm.response.json().forEach(function(studentResult) {",
											"        pm.expect(studentResult).to.be.an('object').that.has.property('grade');",
											"        pm.expect(studentResult).to.have.property('period');",
											"        pm.expect(studentResult).to.have.property('summary');",
											"        pm.expect(studentResult).to.have.property('students');",
											"        studentResult.summary.forEach(function(summaryItem) {",
											"            pm.expect(summaryItem).to.have.property('label');",
											"            pm.expect(summaryItem).to.have.property('colour');",
											"            pm.expect(summaryItem).to.have.property('count');",
											"            pm.expect(summaryItem).to.have.property('identifier');",
											"        });",
											"        studentResult.students.forEach(function(student) {",
											"            pm.expect(student).to.have.property('id');",
											"            pm.expect(student).to.have.property('status');",
											"            pm.expect(student).to.have.property('last_assessment_date');",
											"        });",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/students/result?grade=1&cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"students",
										"result"
									],
									"query": [
										{
											"key": "grade",
											"value": "1"
										},
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Scenario - Only Grade 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array of objects\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
											"    pm.response.json().forEach(function(studentResult) {",
											"        pm.expect(studentResult).to.be.an('object').that.has.property('grade');",
											"        pm.expect(studentResult).to.have.property('period');",
											"        pm.expect(studentResult).to.have.property('summary');",
											"        pm.expect(studentResult).to.have.property('students');",
											"        studentResult.summary.forEach(function(summaryItem) {",
											"            pm.expect(summaryItem).to.have.property('label');",
											"            pm.expect(summaryItem).to.have.property('colour');",
											"            pm.expect(summaryItem).to.have.property('count');",
											"            pm.expect(summaryItem).to.have.property('identifier');",
											"        });",
											"        studentResult.students.forEach(function(student) {",
											"            pm.expect(student).to.have.property('id');",
											"            pm.expect(student).to.have.property('status');",
											"            pm.expect(student).to.have.property('last_assessment_date');",
											"        });",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/students/result?grade=2&cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"students",
										"result"
									],
									"query": [
										{
											"key": "grade",
											"value": "2"
										},
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Scenario - Only Grade 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array of objects\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
											"    pm.response.json().forEach(function(studentResult) {",
											"        pm.expect(studentResult).to.be.an('object').that.has.property('grade');",
											"        pm.expect(studentResult).to.have.property('period');",
											"        pm.expect(studentResult).to.have.property('summary');",
											"        pm.expect(studentResult).to.have.property('students');",
											"        studentResult.summary.forEach(function(summaryItem) {",
											"            pm.expect(summaryItem).to.have.property('label');",
											"            pm.expect(summaryItem).to.have.property('colour');",
											"            pm.expect(summaryItem).to.have.property('count');",
											"            pm.expect(summaryItem).to.have.property('identifier');",
											"        });",
											"        studentResult.students.forEach(function(student) {",
											"            pm.expect(student).to.have.property('id');",
											"            pm.expect(student).to.have.property('status');",
											"            pm.expect(student).to.have.property('last_assessment_date');",
											"        });",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/students/result?grade=3&cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"students",
										"result"
									],
									"query": [
										{
											"key": "grade",
											"value": "3"
										},
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Cycle id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/students/result?grade=1%2C2%2C3&cycle_id=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"students",
										"result"
									],
									"query": [
										{
											"key": "grade",
											"value": "1%2C2%2C3"
										},
										{
											"key": "cycle_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('statusCode');",
											"});",
											"pm.test(\"Response is an object with message property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('message');",
											"});",
											"pm.test(\"Response is an object with error property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "hi"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/students/result",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"students",
										"result"
									],
									"query": [
										{
											"key": "grade",
											"value": "1%2C2%2C3",
											"disabled": true
										},
										{
											"key": "cycle_id",
											"value": "13",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11. Assessment visit result",
					"item": [
						{
							"name": "Valid Scenario-assessment-visit-results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is an object with data property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');",
											"});",
											"",
											"pm.test(\"Each element in the data array has an id property\", function () {",
											"    pm.response.json().data.forEach(function(item) {",
											"        pm.expect(item).to.have.property('id');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 2,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 98,\n                \"competency_id\": 335,\n                \"end_time\": 1705921919264,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705921887610,\n                \"statement\": \"अनुच्छेद को 45 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"300972819\",\n                \"student_name\": \"Ragini\",\n                \"student_session\": null,\n                \"success_criteria\": 45,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g2h_nv4\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 337,\n                \"end_time\": 1705921926273,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705921919582,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"300972819\",\n                \"student_name\": \"Ragini\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2m_npl_5_111\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 336,\n                \"end_time\": 1705921934285,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705921926673,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"300972819\",\n                \"student_name\": \"Ragini\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2h_npl_5_20\"\n            }\n        ],\n        \"subject_id\": 2,\n        \"submission_timestamp\": 1705921934440,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 2,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 126,\n                \"competency_id\": 335,\n                \"end_time\": 1705921963315,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705921938654,\n                \"statement\": \"अनुच्छेद को 45 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"036676167\",\n                \"student_name\": \"Sanskar\",\n                \"student_session\": null,\n                \"success_criteria\": 45,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g2h_nv6\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 337,\n                \"end_time\": 1705921969652,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705921963523,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"036676167\",\n                \"student_name\": \"Sanskar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2m_npl_5_95\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 336,\n                \"end_time\": 1705921980242,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705921969868,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"036676167\",\n                \"student_name\": \"Sanskar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2h_npl_5_2\"\n            }\n        ],\n        \"subject_id\": 2,\n        \"submission_timestamp\": 1705921980621,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 2,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 103,\n                \"competency_id\": 335,\n                \"end_time\": 1705922009101,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705921984770,\n                \"statement\": \"अनुच्छेद को 45 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"261880542\",\n                \"student_name\": \"Shivani\",\n                \"student_session\": null,\n                \"success_criteria\": 45,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g2h_nv2\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 337,\n                \"end_time\": 1705922014848,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922009295,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"261880542\",\n                \"student_name\": \"Shivani\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2m_npl_5_114\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 336,\n                \"end_time\": 1705922022407,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922015045,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"261880542\",\n                \"student_name\": \"Shivani\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2h_npl_5_24\"\n            }\n        ],\n        \"subject_id\": 2,\n        \"submission_timestamp\": 1705922022841,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 2,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 111,\n                \"competency_id\": 335,\n                \"end_time\": 1705922481264,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922457861,\n                \"statement\": \"अनुच्छेद को 45 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"397666327\",\n                \"student_name\": \"Sofiya\",\n                \"student_session\": null,\n                \"success_criteria\": 45,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g2h_nv3\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 337,\n                \"end_time\": 1705922486375,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922481472,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"397666327\",\n                \"student_name\": \"Sofiya\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2m_npl_5_62\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 336,\n                \"end_time\": 1705922492591,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922486586,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"397666327\",\n                \"student_name\": \"Sofiya\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2h_npl_5_15\"\n            }\n        ],\n        \"subject_id\": 2,\n        \"submission_timestamp\": 1705922492724,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 3,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 4,\n                \"competency_id\": 341,\n                \"end_time\": 1705922501569,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922496622,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"038968538\",\n                \"student_name\": \"Nikhil Kumar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_106\"\n            },\n            {\n                \"achievement\": 117,\n                \"competency_id\": 338,\n                \"end_time\": 1705922535479,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922502698,\n                \"statement\": \"अनुच्छेद को 60 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"038968538\",\n                \"student_name\": \"Nikhil Kumar\",\n                \"student_session\": null,\n                \"success_criteria\": 60,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g3h_nv10\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 339,\n                \"end_time\": 1705922542409,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922535681,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"038968538\",\n                \"student_name\": \"Nikhil Kumar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3h_npl_5_96\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 340,\n                \"end_time\": 1705922551052,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922542619,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"038968538\",\n                \"student_name\": \"Nikhil Kumar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_107\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1705922551195,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 3,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 4,\n                \"competency_id\": 341,\n                \"end_time\": 1705922559362,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922554750,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"037473246\",\n                \"student_name\": \"Poorvi\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_106\"\n            },\n            {\n                \"achievement\": 115,\n                \"competency_id\": 338,\n                \"end_time\": 1705922592276,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922560494,\n                \"statement\": \"अनुच्छेद को 60 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"037473246\",\n                \"student_name\": \"Poorvi\",\n                \"student_session\": null,\n                \"success_criteria\": 60,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g3h_nv7\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 339,\n                \"end_time\": 1705922599380,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922592469,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"037473246\",\n                \"student_name\": \"Poorvi\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3h_npl_5_99\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 340,\n                \"end_time\": 1705922604902,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922599607,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"037473246\",\n                \"student_name\": \"Poorvi\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_104\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1705922605039,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 3,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 4,\n                \"competency_id\": 341,\n                \"end_time\": 1705922612364,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922607366,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"249590146\",\n                \"student_name\": \"Ranu\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_111\"\n            },\n            {\n                \"achievement\": 105,\n                \"competency_id\": 338,\n                \"end_time\": 1705922648047,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922613538,\n                \"statement\": \"अनुच्छेद को 60 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"249590146\",\n                \"student_name\": \"Ranu\",\n                \"student_session\": null,\n                \"success_criteria\": 60,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g3h_nv1\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 339,\n                \"end_time\": 1705922655819,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922648237,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"249590146\",\n                \"student_name\": \"Ranu\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3h_npl_5_89\"\n            },\n            {\n                \"achievement\": 3,\n                \"competency_id\": 340,\n                \"end_time\": 1705922662369,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922656036,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"249590146\",\n                \"student_name\": \"Ranu\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_121\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1705922662484,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 3,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 4,\n                \"competency_id\": 341,\n                \"end_time\": 1705922670092,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922665249,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"376717535\",\n                \"student_name\": \"Rinki\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_111\"\n            },\n            {\n                \"achievement\": 94,\n                \"competency_id\": 338,\n                \"end_time\": 1705922711545,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922671267,\n                \"statement\": \"अनुच्छेद को 60 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"376717535\",\n                \"student_name\": \"Rinki\",\n                \"student_session\": null,\n                \"success_criteria\": 60,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g3h_nv9\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 339,\n                \"end_time\": 1705922718289,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922711731,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"376717535\",\n                \"student_name\": \"Rinki\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3h_npl_5_88\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 340,\n                \"end_time\": 1705922722981,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922718504,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"376717535\",\n                \"student_name\": \"Rinki\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_113\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1705922723122,\n        \"udise\": 9150202302\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"  pm.response.to.have.status(403);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 2,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 98,\n                \"competency_id\": 335,\n                \"end_time\": 1705921919264,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705921887610,\n                \"statement\": \"अनुच्छेद को 45 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"300972819\",\n                \"student_name\": \"Ragini\",\n                \"student_session\": null,\n                \"success_criteria\": 45,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g2h_nv4\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 337,\n                \"end_time\": 1705921926273,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705921919582,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"300972819\",\n                \"student_name\": \"Ragini\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2m_npl_5_111\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 336,\n                \"end_time\": 1705921934285,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705921926673,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"300972819\",\n                \"student_name\": \"Ragini\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2h_npl_5_20\"\n            }\n        ],\n        \"subject_id\": 2,\n        \"submission_timestamp\": 1705921934440,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 2,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 126,\n                \"competency_id\": 335,\n                \"end_time\": 1705921963315,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705921938654,\n                \"statement\": \"अनुच्छेद को 45 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"036676167\",\n                \"student_name\": \"Sanskar\",\n                \"student_session\": null,\n                \"success_criteria\": 45,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g2h_nv6\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 337,\n                \"end_time\": 1705921969652,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705921963523,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"036676167\",\n                \"student_name\": \"Sanskar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2m_npl_5_95\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 336,\n                \"end_time\": 1705921980242,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705921969868,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"036676167\",\n                \"student_name\": \"Sanskar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2h_npl_5_2\"\n            }\n        ],\n        \"subject_id\": 2,\n        \"submission_timestamp\": 1705921980621,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 2,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 103,\n                \"competency_id\": 335,\n                \"end_time\": 1705922009101,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705921984770,\n                \"statement\": \"अनुच्छेद को 45 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"261880542\",\n                \"student_name\": \"Shivani\",\n                \"student_session\": null,\n                \"success_criteria\": 45,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g2h_nv2\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 337,\n                \"end_time\": 1705922014848,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922009295,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"261880542\",\n                \"student_name\": \"Shivani\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2m_npl_5_114\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 336,\n                \"end_time\": 1705922022407,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922015045,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"261880542\",\n                \"student_name\": \"Shivani\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2h_npl_5_24\"\n            }\n        ],\n        \"subject_id\": 2,\n        \"submission_timestamp\": 1705922022841,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 2,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 111,\n                \"competency_id\": 335,\n                \"end_time\": 1705922481264,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922457861,\n                \"statement\": \"अनुच्छेद को 45 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"397666327\",\n                \"student_name\": \"Sofiya\",\n                \"student_session\": null,\n                \"success_criteria\": 45,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g2h_nv3\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 337,\n                \"end_time\": 1705922486375,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922481472,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"397666327\",\n                \"student_name\": \"Sofiya\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2m_npl_5_62\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 336,\n                \"end_time\": 1705922492591,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922486586,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"397666327\",\n                \"student_name\": \"Sofiya\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g2h_npl_5_15\"\n            }\n        ],\n        \"subject_id\": 2,\n        \"submission_timestamp\": 1705922492724,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 3,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 4,\n                \"competency_id\": 341,\n                \"end_time\": 1705922501569,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922496622,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"038968538\",\n                \"student_name\": \"Nikhil Kumar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_106\"\n            },\n            {\n                \"achievement\": 117,\n                \"competency_id\": 338,\n                \"end_time\": 1705922535479,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922502698,\n                \"statement\": \"अनुच्छेद को 60 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"038968538\",\n                \"student_name\": \"Nikhil Kumar\",\n                \"student_session\": null,\n                \"success_criteria\": 60,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g3h_nv10\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 339,\n                \"end_time\": 1705922542409,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922535681,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"038968538\",\n                \"student_name\": \"Nikhil Kumar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3h_npl_5_96\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 340,\n                \"end_time\": 1705922551052,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922542619,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"038968538\",\n                \"student_name\": \"Nikhil Kumar\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_107\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1705922551195,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 3,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 4,\n                \"competency_id\": 341,\n                \"end_time\": 1705922559362,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922554750,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"037473246\",\n                \"student_name\": \"Poorvi\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_106\"\n            },\n            {\n                \"achievement\": 115,\n                \"competency_id\": 338,\n                \"end_time\": 1705922592276,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922560494,\n                \"statement\": \"अनुच्छेद को 60 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"037473246\",\n                \"student_name\": \"Poorvi\",\n                \"student_session\": null,\n                \"success_criteria\": 60,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g3h_nv7\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 339,\n                \"end_time\": 1705922599380,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922592469,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"037473246\",\n                \"student_name\": \"Poorvi\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3h_npl_5_99\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 340,\n                \"end_time\": 1705922604902,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922599607,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"037473246\",\n                \"student_name\": \"Poorvi\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_104\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1705922605039,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 3,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 4,\n                \"competency_id\": 341,\n                \"end_time\": 1705922612364,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922607366,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"249590146\",\n                \"student_name\": \"Ranu\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_111\"\n            },\n            {\n                \"achievement\": 105,\n                \"competency_id\": 338,\n                \"end_time\": 1705922648047,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922613538,\n                \"statement\": \"अनुच्छेद को 60 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"249590146\",\n                \"student_name\": \"Ranu\",\n                \"student_session\": null,\n                \"success_criteria\": 60,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g3h_nv1\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 339,\n                \"end_time\": 1705922655819,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922648237,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"249590146\",\n                \"student_name\": \"Ranu\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3h_npl_5_89\"\n            },\n            {\n                \"achievement\": 3,\n                \"competency_id\": 340,\n                \"end_time\": 1705922662369,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"0\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922656036,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"249590146\",\n                \"student_name\": \"Ranu\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_121\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1705922662484,\n        \"udise\": 9150202302\n    },\n    {\n        \"actor_id\": 2,\n        \"app_version_code\": 202020,\n        \"assessment_type_id\": 1,\n        \"block_id\": 4,\n        \"grade\": 3,\n        \"mentor_id\": null,\n        \"no_of_student\": 1,\n        \"results\": [\n            {\n                \"achievement\": 4,\n                \"competency_id\": 341,\n                \"end_time\": 1705922670092,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922665249,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"376717535\",\n                \"student_name\": \"Rinki\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_111\"\n            },\n            {\n                \"achievement\": 94,\n                \"competency_id\": 338,\n                \"end_time\": 1705922711545,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"bolo\",\n                \"odk_results\": [],\n                \"session_completed\": true,\n                \"start_time\": 1705922671267,\n                \"statement\": \"अनुच्छेद को 60 शब्द प्रति मिनट के प्रवाह से पढ़ लेते हैं\",\n                \"student_id\": \"376717535\",\n                \"student_name\": \"Rinki\",\n                \"student_session\": null,\n                \"success_criteria\": 60,\n                \"total_questions\": 0,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"upp_g3h_nv9\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 339,\n                \"end_time\": 1705922718289,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_3_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_hin_1_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922711731,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"376717535\",\n                \"student_name\": \"Rinki\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3h_npl_5_88\"\n            },\n            {\n                \"achievement\": 4,\n                \"competency_id\": 340,\n                \"end_time\": 1705922722981,\n                \"is_network_active\": true,\n                \"is_passed\": true,\n                \"module\": \"odk\",\n                \"odk_results\": [\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_4_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_2_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_1_ans\"\n                    },\n                    {\n                        \"answer\": \"1\",\n                        \"question\": \"ques_math_3_ans\"\n                    }\n                ],\n                \"session_completed\": true,\n                \"start_time\": 1705922718504,\n                \"statement\": \"ODK flow\",\n                \"student_id\": \"376717535\",\n                \"student_name\": \"Rinki\",\n                \"student_session\": null,\n                \"success_criteria\": 75,\n                \"total_questions\": 4,\n                \"total_time_taken\": 0,\n                \"workflow_ref_id\": \"g3m_npl_6_113\"\n            }\n        ],\n        \"subject_id\": 1,\n        \"submission_timestamp\": 1705922723122,\n        \"udise\": 9150202302\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-visit-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-visit-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without body Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text Unexpected token in JSON at position 16 \", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token [ in JSON at position 16\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        [\n            {\n                \n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without submission_timestamp Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message should contain text submission_timestamp must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"submission_timestamp must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without grade Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8 also grade must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message[0]).to.contain(\"grade must be one of the following values: 1, 2, 3, 4, 5, 6, 7, 8\");\r",
											"pm.expect(pm.response.json().message[1]).to.contain(\"grade must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n    \n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong submission_timestamp Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text Unexpected token a in JSON at position 36\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 36\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n    \"submission_timestamp\": abcd,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": abcd,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.wrong grade Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text Unexpected token a in JSON at position 74\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 74\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 15a,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 156,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without actor_id Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message should contain text actor_id must be one of the following values: 1, 2, 3, 4, 5 also actor_id must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message[0]).to.contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"pm.expect(pm.response.json().message[1]).to.contain(\"actor_id must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n       \n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong actor_id Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain text actor_id must be one of the following values: 1, 2, 3, 4, 5\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"actor_id must be one of the following values: 1, 2, 3, 4, 5\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": -32,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1000,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without udise Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain udise must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"udise must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n       \n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n   \n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.wrong udise Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain Unexpected token a in JSON at position 116\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 116\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 10,\n        \"udise\": a123,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": avcd,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass.without app_version_code Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain app_version_code must be an integer number\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"app_version_code must be an integer number\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong app_version_code Survey Result Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message should contain Unexpected token a in JSON at position 155\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token a in JSON at position 155\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": abcd,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": abcde,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without questions and questions_id Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify statusCode Response should be 400 Bad Request\",function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response statusCode should contain 400 Bad Request \", function() {\r",
											"pm.expect(pm.response.json().statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message should contain Unexpected token [ in JSON at position 466\", function() {\r",
											"pm.expect(pm.response.json().message).to.contain(\"Unexpected token [ in JSON at position 466\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad Request \", function() {\r",
											"pm.expect(pm.response.json().error).to.contain(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n       [\n            {\n                \n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong  questions_id Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Verify Response should be 201 OK\",function(){\r",
											"pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Response msg is Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.equal('Success!');\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.exist ;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"abnchuudhdejjeojd\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"abrrfrfffrcd\",\n                \"value\": \"122\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. wrong value Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify statusCode Response should be 201 Created\",function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify message Response contain Success\", function() {\r",
											"pm.expect(pm.response.json().msg).to.contain(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Test 125 Verify data should contain id\", function() {\r",
											"pm.expect(pm.response.json().data[0]).to.have.property(\"id\");\r",
											"pm.expect(pm.response.json().data[1]).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Test 126 Verify data should contain id with number\", function() {\r",
											"pm.expect(pm.response.json().data[0].id).to.be.a('number');\r",
											"pm.expect(pm.response.json().data[1].id).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\" Verify data array should not empty\", function() {\r",
											"pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"ewfefefffe\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"wfefeffwfw\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Ass. without value Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Response should be 400 OK\",function(){\r",
											"pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\" Verify Response msg is `questions.0.value must be a string` \", function() {\r",
											"pm.expect(pm.response.json().message).contain(\"questions.0.value must be a string\");\r",
											"});\r",
											"\r",
											"pm.test(\" Verify error should contain Bad request\", function() {\r",
											"pm.expect(pm.response.json().error).contain(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"submission_timestamp\": 1680775548098,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\",\n                \"value\": \"122\"\n            }\n        ]\n    },\n    {\n        \"submission_timestamp\": 1680775548090,\n        \"grade\": 1,\n        \"actor_id\": 1,\n        \"udise\": 9112900305,\n        \"app_version_code\": 150010,\n        \"questions\": [\n            {\n                \"question_id\": \"1\"\n            }\n        ]\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/assessment-survey-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"assessment-survey-results"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12. School result calculate API",
					"item": [
						{
							"name": "Valid Scenario - School result calculate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is an object with msg and data properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('msg', 'data');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/result/calculate?cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"result",
										"calculate"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/9150202302/result/calculate?cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"9150202302",
										"result",
										"calculate"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Scenario - School result calculate Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is an object with msg and data properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('msg', 'data');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc0NTcxNjgsImlhdCI6MTcwNTkyMTE2OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiIxMGM2M2Y1YS01MTU0LTQ2NzEtYWRkYi05MWE4ZTVjY2E1NTQiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiY2Q4ZGMyYmItMzlkZi00MWM1LWIxMTAtZmQ2MDEwYTdmY2MyIiwiYXV0aF90aW1lIjoxNzA1OTIxMTY4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.Du8aA3BI24hBIFDVZNPUvCMSUqS9PIHLHa-RzMzEZhOC0fquQoGtY87202_lEHncVdh6gnu6I2vA47zsLYWXctcOwJwdDMWf-TIbBmyKWs1u8ssqZgZq7mQHL-oTAsfEIkf4CpupiPV2h70jSW74gABkSqfApXTjvydxsux6AY8wo7GZHJCOsFTP3y-EhTMqXa_RAWNPtLFOxZJSPpG1OpNowjdOC72HoBRp6bRBtS2zH6JLwBi8raRSLpD0rCpZ1US8Ne9XPd1XNj9LhUv9Tzjyu9CliwE8SyrCedfSjIZJR0mnbGDWpLAro2bGZEU3dJX95IvPKY0lncBXRLMk_A"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "timezone",
										"value": "Asia/Kolkata"
									},
									{
										"key": "platform",
										"value": "Android"
									},
									{
										"key": "deviceModel",
										"value": "POCO F1"
									},
									{
										"key": "deviceManufacturer",
										"value": "Xiaomi"
									},
									{
										"key": "deviceVersion",
										"value": "29"
									},
									{
										"key": "appVersionCode",
										"value": "202020"
									},
									{
										"key": "appVersionName",
										"value": "2.2.2"
									},
									{
										"key": "Host",
										"value": "128.199.28.17:3000"
									},
									{
										"key": "Connection",
										"value": "Keep-Alive"
									},
									{
										"key": "User-Agent",
										"value": "okhttp/4.10.0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/school/915202/result/calculate?cycle_id=13",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"school",
										"915202",
										"result",
										"calculate"
									],
									"query": [
										{
											"key": "cycle_id",
											"value": "13"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin API's",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"if (jsonData?.result?.data?.user?.token) {",
											"    pm.environment.set(\"admin-token\", jsonData.result.data.user.token);",
											"     pm.collectionVariables.set(\"admin-token\", jsonData.result.data.user.token);",
											"}",
											"",
											"",
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is a JSON object\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"The result object contains a data property with a user object\", function () {",
											"    pm.expect(jsonData.result.data.user).to.be.an('object');",
											"});",
											"",
											"pm.test(\"The user object has a token property\", function () {",
											"    pm.expect(jsonData.result.data.user.token).to.exist.and.to.be.a('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin-api-key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"loginId\": \"{{admin-user}}\",\n    \"password\": \"{{admin-password}}\",\n    \"applicationId\": \"{{admin-application-id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user-service}}/api/login",
									"host": [
										"{{user-service}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Queues",
					"item": [
						{
							"name": "Pause",
							"item": [
								{
									"name": "queues-pause",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"   pm.test(\"Verify Response should be 201 OK\",function(){",
													"    pm.response.to.have.status(201);",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/queues/pause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"queues",
												"pause"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is a JSON object with statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/queues/pause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"queues",
												"pause"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Resume",
							"item": [
								{
									"name": "queues-resume",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"   pm.test(\"Verify Response should be 201 OK\",function(){",
													"    pm.response.to.have.status(201);",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/queues/resume",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"queues",
												"resume"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is a JSON object with statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.have.property('statusCode');",
													"    pm.expect(jsonData).to.have.property('message');",
													"    pm.expect(jsonData).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/queues/resume",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"queues",
												"resume"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Count",
							"item": [
								{
									"name": "queues-count",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an object with assessment_visit_results property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('assessment_visit_results');",
													"});",
													"",
													"pm.test(\"Response is an object with assessment_survey_results property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('assessment_survey_results');",
													"});",
													"",
													"pm.test(\"Response is an object with calculate_examiner_cycle_udise_result property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('calculate_examiner_cycle_udise_result');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/queues/count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"queues",
												"count"
											]
										}
									},
									"response": []
								},
								{
									"name": "queues-count Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is a JSON object with statusCode, message, and error properties\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/queues/count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"queues",
												"count"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Failed",
							"item": [
								{
									"name": "failed-count",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an object with assessment_visit_results property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('assessment_visit_results');",
													"});",
													"",
													"pm.test(\"Response is an object with assessment_survey_results property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('assessment_survey_results');",
													"});",
													"",
													"pm.test(\"Response is an object with calculate_examiner_cycle_udise_result property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('calculate_examiner_cycle_udise_result');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/queues/failed-count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"queues",
												"failed-count"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/queues/failed-count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"queues",
												"failed-count"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Student",
					"item": [
						{
							"name": "Add student",
							"item": [
								{
									"name": "admin-students",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get the current request body",
													"var requestBody = pm.request.body.raw;",
													"var jsonData = JSON.parse(requestBody);",
													"",
													"// Update roll_no and unique_id in the first item of the array",
													"jsonData[0].roll_no = getRandomNumber();",
													"pm.environment.set(\"roll_no\",jsonData[0].roll_no)",
													"pm.collectionVariables.set(\"roll_no\",jsonData[0].roll_no)",
													"jsonData[0].unique_id = getRandomUniqueId();",
													"pm.environment.set(\"unique_id\",jsonData[0].unique_id)",
													"pm.collectionVariables.set(\"unique_id\",jsonData[0].unique_id)",
													"// Update the request body with the modified jsonData",
													"pm.request.body.raw = JSON.stringify(jsonData);",
													"",
													"// Log the updated request body",
													"console.log(pm.request.body.raw);",
													"",
													"",
													"function getRandomNumber() {",
													"    return Math.floor(Math.random() * 1000) + 10; ",
													"}",
													"",
													"",
													"function getRandomUniqueId() {",
													"    return Math.floor(Math.random() * 10000000000).toString();",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"",
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response is an object with msg property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('msg');",
													"});",
													"",
													"pm.test(\"Response is an object with data property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Aakash\",\n        \"gender\": \"male\",\n        \"roll_no\": 123,\n        \"unique_id\": \"123456786\",\n        \"grade\": 1,\n        \"udise\": 9220502502,\n        \"dob\": \"1995-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Grade should not be greater than 8",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a JSON object\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response has statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('statusCode');",
													"    pm.expect(jsonData).to.have.property('message');",
													"    pm.expect(jsonData).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Aakash\",\n        \"gender\": \"male\",\n        \"roll_no\": 123,\n        \"unique_id\": \"123456786\",\n        \"grade\": 9,\n        \"udise\": 9220502502,\n        \"dob\": \"1995-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid UDISE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
													"});",
													"",
													"pm.test(\"Response has statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('statusCode');",
													"    pm.expect(jsonData).to.have.property('message');",
													"    pm.expect(jsonData).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Aakash\",\n        \"gender\": \"male\",\n        \"roll_no\": 123,\n        \"unique_id\": \"123456786\",\n        \"grade\": 1,\n        \"udise\": 2,\n        \"dob\": \"1995-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Name should not be empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a JSON object\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response has a statusCode property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('statusCode');",
													"});",
													"",
													"pm.test(\"Response has a message property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Response has an error property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"\",\n        \"gender\": \"male\",\n        \"roll_no\": 123,\n        \"unique_id\": \"123456786\",\n        \"grade\": 1,\n        \"udise\": 9220502502,\n        \"dob\": \"1995-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Gender should be valid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Akash\",\n        \"gender\": \"\",\n        \"roll_no\": 123,\n        \"unique_id\": \"123456786\",\n        \"grade\": 1,\n        \"udise\": 9220502502,\n        \"dob\": \"1995-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Aakash\",\n        \"gender\": \"male\",\n        \"roll_no\": 123,\n        \"unique_id\": \"123456786\",\n        \"grade\": 1,\n        \"udise\": 9220502502,\n        \"dob\": \"1995-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update student",
							"item": [
								{
									"name": "Update Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an object with msg property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('msg');",
													"});",
													"",
													"pm.test(\"Response is an object with data property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Aakash 2\",\n        \"gender\": \"male\",\n        \"roll_no\": {{roll_no}},\n        \"unique_id\": \"{{unique_id}}\",\n        \"grade\": 1,\n        \"udise\": 9220502502,\n        \"dob\": \"1994-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 403\", function () {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - statusCode, message, and error\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('statusCode');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData).to.have.property('error');",
													"});",
													"",
													"",
													"pm.test(\"StatusCode is a non-zero integer\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
													"  pm.expect(responseData.statusCode).to.not.equal(0);",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Error is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should be a non-empty string\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Aakash 2\",\n        \"gender\": \"male\",\n        \"roll_no\": {{roll_no}},\n        \"unique_id\": \"{{unique_id}}\",\n        \"grade\": 1,\n        \"udise\": 9220502502,\n        \"dob\": \"1994-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without unique Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Aakash 2\",\n        \"gender\": \"male\",\n        \"roll_no\": {{roll_no}},\n        \n        \"grade\": 1,\n        \"udise\": 9220502502,\n        \"dob\": \"1994-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid UDISE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a JSON object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response has a statusCode property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('statusCode');",
													"});",
													"",
													"pm.test(\"Response has a message property that is an array\", function () {",
													"    pm.expect(pm.response.json().message).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Response has an error property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"Aakash 2\",\n        \"gender\": \"male\",\n        \"roll_no\": {{roll_no}},\n        \"unique_id\": \"{{unique_id}}\",\n        \"grade\": 1,\n        \"udise\": 922050250,\n        \"dob\": \"1994-01-01\",\n        \"admission_date\": \"1997-01-01\",\n        \"father_name\": \"Mr. Father\",\n        \"mother_name\": \"Mrs. Mother\",\n        \"section\": \"A\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete students",
							"item": [
								{
									"name": "Delete student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an object with count property\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.property('count');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"unique_id\": \"{{unique_id}}\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete student Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is a valid JSON object\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('statusCode');",
													"    pm.expect(jsonData).to.have.property('message');",
													"    pm.expect(jsonData).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"unique_id\": \"{{unique_id}}\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty Unique Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a valid JSON object\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response contains statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('statusCode');",
													"    pm.expect(jsonData).to.have.property('message');",
													"    pm.expect(jsonData).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"unique_id\": \"\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Unique ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an object with count property\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.property('count');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDY4Njk5NDgsImlhdCI6MTcwNjAwNTk0OCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiJjNzczYmFlMi1iMDc4LTRiZDEtYjU0Ni02M2ZmZjMwZDdkNzUiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MDA1OTQ4LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.TzWmmH0GOXViIYc200y320FZbEVmhJR-kJlvJhrWoJSJ7BcA_MJ-Nba4vVMzAjLvVPgIqA_wrRh4N81DVYjAcUes-Kl7_C3-iNPMao-RAKr9jZCprwDVxVc6NUO-zQnK4S6tB9RyyneEz8tLUtboi9i3hX0siBLOV5vF_grO5v9WGL__ZhohEBCzWccWhZWkqOh9kLNwodx7HXwXmU-WeK3vVx5Wa_Z2AVD0v2Vw4kA_9ZCEcV0sZ6-Ing2aeZm7Esn26Nai-8nS8MnXuQ0p4BBgHcnMhMZ0PoudqaGXNPTm5Asqtg9cVXgE90O3S28FtY0V6jfO9GMRV2gjnpNqGg",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"unique_id\": \"{{unique_id}}+12345\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/students",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"students"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Mentor",
					"item": [
						{
							"name": "Create/Update mentor OLD",
							"item": [
								{
									"name": "Create/Update Mentor (Old)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response is an object with specific properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData).to.have.property('phone_no');",
													"    pm.expect(jsonData).to.have.property('block_town_name');",
													"    pm.expect(jsonData).to.have.property('area_type');",
													"    pm.expect(jsonData).to.have.property('officer_name');",
													"    pm.expect(jsonData).to.have.property('pin');",
													"    pm.expect(jsonData).to.have.property('district_id');",
													"    pm.expect(jsonData).to.have.property('block_id');",
													"    pm.expect(jsonData).to.have.property('designation_id');",
													"    pm.expect(jsonData).to.have.property('actor_id');",
													"    pm.expect(jsonData).to.have.property('created_at');",
													"    pm.expect(jsonData).to.have.property('updated_at');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_no\": \"9640863206\",\n    \"district_name\": \"AGRA\",\n    \"block_town_name\": \"Kheragarh\",\n    \"designation\": \"teacher\",\n    \"udise\": 9150204103,\n    \"area_type\": \"Rural\",\n    \"officer_name\": \"Abhishek\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor/old",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor",
												"old"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is a JSON object with statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_no\": \"9640863206\",\n    \"district_name\": \"AGRA\",\n    \"block_town_name\": \"Kheragarh\",\n    \"designation\": \"teacher\",\n    \"udise\": 9150204103,\n    \"area_type\": \"Rural\",\n    \"officer_name\": \"Abhishek\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor/old",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor",
												"old"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without UDISE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a JSON object\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response has statusCode property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('statusCode');",
													"});",
													"",
													"pm.test(\"Response has message property as an array\", function () {",
													"    pm.expect(pm.response.json().message).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Response has error property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_no\": \"9640863206\",\n    \"district_name\": \"AGRA\",\n    \"block_town_name\": \"Kheragarh\",\n    \"designation\": \"teacher\",\n    \n    \"area_type\": \"Rural\",\n    \"officer_name\": \"Abhishek\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor/old",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor",
												"old"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without mobile no",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a JSON object with statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.have.property('statusCode');",
													"    pm.expect(jsonData).to.have.property('message');",
													"    pm.expect(jsonData).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"district_name\": \"AGRA\",\n    \"block_town_name\": \"Kheragarh\",\n    \"designation\": \"teacher\",\n    \"udise\": 9150204103,\n    \"area_type\": \"Rural\",\n    \"officer_name\": \"Abhishek\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor/old",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor",
												"old"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create/Update Mentor New",
							"item": [
								{
									"name": "Create/Update Mentor (New)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response is an object with specific properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.includes.all.keys(",
													"        'id', 'phone_no', 'district_name', 'block_town_name', 'area_type', 'officer_name', ",
													"        'designation', 'subject_of_matter', 'target_visits', 'pin', 'district_id', 'block_id', ",
													"        'designation_id', 'actor_id', 'created_at', 'updated_at'",
													"    );",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_no\": \"9640863206\",\n    \"district_id\": 1,\n    \"block_id\": 1,\n    \"designation_id\": 1,\n    \"actor_id\": 3,\n    \"udise\": 9150204102,\n    \"area_type\": \"Rural\",\n    \"officer_name\": \"Samagra Test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is a JSON object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_no\": \"9640863206\",\n    \"district_id\": 1,\n    \"block_id\": 1,\n    \"designation_id\": 1,\n    \"actor_id\": 3,\n    \"udise\": 9150204102,\n    \"area_type\": \"Rural\",\n    \"officer_name\": \"Samagra Test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without UDISE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a JSON object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response has a statusCode property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('statusCode');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_no\": \"9640863206\",\n    \"district_id\": 1,\n    \"block_id\": 1,\n    \"designation_id\": 1,\n    \"actor_id\": 3,\n    \n    \"area_type\": \"Rural\",\n    \"officer_name\": \"Samagra Test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without phone no",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a JSON object\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response has statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"statusCode\");",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \n    \"district_id\": 1,\n    \"block_id\": 1,\n    \"designation_id\": 1,\n    \"actor_id\": 3,\n    \"udise\": 9150204102,\n    \"area_type\": \"Rural\",\n    \"officer_name\": \"Samagra Test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Clear cache",
							"item": [
								{
									"name": "Clear Mentor Cache",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response is an object with status property\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.property('status');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phoneNumbers\": [\"9640863206\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor/clear-cache",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor",
												"clear-cache"
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is a JSON object with statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phoneNumbers\": [\"9640863206\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor/clear-cache",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor",
												"clear-cache"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object with statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/mentor/clear-cache",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"mentor",
												"clear-cache"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update fcm token",
							"item": [
								{
									"name": "Set Mentor FCM Token Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an object with msg and data properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('msg', 'data');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\": \"some token\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/mentor/token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mentor",
												"token"
											]
										},
										"description": "Success:\n\n- HTTP Code === 200"
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is in JSON format\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response has statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"statusCode\");",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\": \"some token\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/mentor/token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mentor",
												"token"
											]
										},
										"description": "Success:\n\n- HTTP Code === 200"
									},
									"response": []
								},
								{
									"name": "empty token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a JSON object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response has a statusCode property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('statusCode');",
													"});",
													"",
													"pm.test(\"Response has a message property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Response has an error property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/mentor/token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mentor",
												"token"
											]
										},
										"description": "Success:\n\n- HTTP Code === 200"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Data exposure APIs",
					"item": [
						{
							"name": "Student assessment data",
							"item": [
								{
									"name": "Student assessment data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an array of objects with specific properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('array');",
													"    jsonData.forEach(function(student) {",
													"        pm.expect(student).to.have.property('block_name');",
													"        pm.expect(student).to.have.property('class');",
													"        pm.expect(student).to.have.property('created_at');",
													"        pm.expect(student).to.have.property('district_name');",
													"        pm.expect(student).to.have.property('phone_no');",
													"        pm.expect(student).to.have.property('result');",
													"        pm.expect(student).to.have.property('student_id');",
													"        pm.expect(student).to.have.property('udise');",
													"        pm.expect(student).to.have.property('user_type');",
													"    });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dataBaseUrl}}/data/student-assessment-data?limit=10&offset=0&from_date=2022-01-01&to_date=2034-02-01",
											"host": [
												"{{dataBaseUrl}}"
											],
											"path": [
												"data",
												"student-assessment-data"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "from_date",
													"value": "2022-01-01"
												},
												{
													"key": "to_date",
													"value": "2034-02-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Params",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object with error property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dataBaseUrl}}/data/student-assessment-data",
											"host": [
												"{{dataBaseUrl}}"
											],
											"path": [
												"data",
												"student-assessment-data"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"disabled": true
												},
												{
													"key": "from_date",
													"value": "2022-01-01",
													"disabled": true
												},
												{
													"key": "to_date",
													"value": "2034-02-01",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response is an object with message property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('message');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dataBaseUrl}}/data/student-assessment-data?limit=10&offset=0&from_date=2022-01-01&to_date=2034-02-01",
											"host": [
												"{{dataBaseUrl}}"
											],
											"path": [
												"data",
												"student-assessment-data"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "from_date",
													"value": "2022-01-01"
												},
												{
													"key": "to_date",
													"value": "2034-02-01"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mentor Login data",
							"item": [
								{
									"name": "Mentor Login Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an array of objects with specific properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('array');",
													"    jsonData.forEach(function(data) {",
													"        pm.expect(data).to.have.property('actor');",
													"        pm.expect(data).to.have.property('block');",
													"        pm.expect(data).to.have.property('block_id');",
													"        pm.expect(data).to.have.property('district');",
													"        pm.expect(data).to.have.property('district_id');",
													"        pm.expect(data).to.have.property('id');",
													"        pm.expect(data).to.have.property('phone_no');",
													"        pm.expect(data).to.have.property('udise');",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dataBaseUrl}}/data/login?limit=10&offset=0",
											"host": [
												"{{dataBaseUrl}}"
											],
											"path": [
												"data",
												"login"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mentor Login Data Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an array of objects with specific properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('array');",
													"    jsonData.forEach(function(data) {",
													"        pm.expect(data).to.have.property('actor');",
													"        pm.expect(data).to.have.property('block');",
													"        pm.expect(data).to.have.property('block_id');",
													"        pm.expect(data).to.have.property('district');",
													"        pm.expect(data).to.have.property('district_id');",
													"        pm.expect(data).to.have.property('id');",
													"        pm.expect(data).to.have.property('phone_no');",
													"        pm.expect(data).to.have.property('udise');",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dataBaseUrl}}/data/login?limit=10&offset=0",
											"host": [
												"{{dataBaseUrl}}"
											],
											"path": [
												"data",
												"login"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response is an object with message property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('message');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dataBaseUrl}}/data/login?limit=10&offset=0",
											"host": [
												"{{dataBaseUrl}}"
											],
											"path": [
												"data",
												"login"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Chatbot Data",
							"item": [
								{
									"name": "Chatbot Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an array of objects with specific properties\", function () {",
													"    var data = pm.response.json();",
													"    data.forEach(function(item) {",
													"        pm.expect(item).to.have.property('actor');",
													"        pm.expect(item).to.have.property('block');",
													"        pm.expect(item).to.have.property('block_id');",
													"        pm.expect(item).to.have.property('bot_id');",
													"        pm.expect(item).to.have.property('date');",
													"        pm.expect(item).to.have.property('district');",
													"        pm.expect(item).to.have.property('district_id');",
													"        pm.expect(item).to.have.property('event');",
													"        pm.expect(item).to.have.property('mentor_id');",
													"        pm.expect(item).to.have.property('phone_no');",
													"        pm.expect(item).to.have.property('udise');",
													"        pm.expect(item).to.have.property('views');",
													"    });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dataBaseUrl}}/data/chatbot-stats?limit=10&offset=0&from_date=2022-01-01&to_date=2034-02-01",
											"host": [
												"{{dataBaseUrl}}"
											],
											"path": [
												"data",
												"chatbot-stats"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "from_date",
													"value": "2022-01-01"
												},
												{
													"key": "to_date",
													"value": "2034-02-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Params",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a valid JSON object\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has an error property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dataBaseUrl}}/data/chatbot-stats",
											"host": [
												"{{dataBaseUrl}}"
											],
											"path": [
												"data",
												"chatbot-stats"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"disabled": true
												},
												{
													"key": "from_date",
													"value": "2022-01-01",
													"disabled": true
												},
												{
													"key": "to_date",
													"value": "2034-02-01",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response is an object with message property\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('message');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin-token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dataBaseUrl}}/data/chatbot-stats?limit=10&offset=0&from_date=2022-01-01&to_date=2034-02-01",
											"host": [
												"{{dataBaseUrl}}"
											],
											"path": [
												"data",
												"chatbot-stats"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "from_date",
													"value": "2022-01-01"
												},
												{
													"key": "to_date",
													"value": "2034-02-01"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Chatbot Telemetry",
							"item": [
								{
									"name": "GET Bot Telemetry",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('array');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/mentor/bot/telemetry?action=123",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mentor",
												"bot",
												"telemetry"
											],
											"query": [
												{
													"key": "action",
													"value": "123"
												}
											]
										},
										"description": "Success:\n\n- HTTP Code === 200"
									},
									"response": []
								},
								{
									"name": "Without action key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is a JSON object\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response contains a statusCode property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('statusCode');",
													"});",
													"",
													"pm.test(\"Response contains a message property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Response contains an error property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/mentor/bot/telemetry",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mentor",
												"bot",
												"telemetry"
											],
											"query": [
												{
													"key": "action",
													"value": "123",
													"disabled": true
												}
											]
										},
										"description": "Success:\n\n- HTTP Code === 200"
									},
									"response": []
								},
								{
									"name": "Without Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is a JSON object with statusCode, message, and error properties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('statusCode', 'message', 'error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/mentor/bot/telemetry?action=123",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mentor",
												"bot",
												"telemetry"
											],
											"query": [
												{
													"key": "action",
													"value": "123"
												}
											]
										},
										"description": "Success:\n\n- HTTP Code === 200"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Geofencing",
					"item": [
						{
							"name": "Whitelist Udises",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"whitelist\": [\n        9150204102,\n        9150204103\n    ],\n    \"blacklist\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/school/geo-fencing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"school",
										"geo-fencing"
									]
								}
							},
							"response": []
						},
						{
							"name": "Blacklist udises",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"whitelist\": [\n        \n    ],\n    \"blacklist\": [9150204102,\n        9150204103]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/school/geo-fencing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"school",
										"geo-fencing"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response has statusCode, message, and error properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('statusCode');",
											"    pm.expect(jsonData).to.have.property('message');",
											"    pm.expect(jsonData).to.have.property('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin-token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"whitelist\": [\n        \n    ],\n    \"blacklist\": [9150204102,\n        9150204103]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/school/geo-fencing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"school",
										"geo-fencing"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Assement visit result",
					"item": [
						{
							"name": "Get Assessment Visit Results Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with assessment_visit_results property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('assessment_visit_results');",
											"});",
											"",
											"pm.test(\"Each element in the assessment_visit_results array has required properties\", function () {",
											"    pm.response.json().assessment_visit_results.forEach(function(result) {",
											"        pm.expect(result).to.have.property('id');",
											"        pm.expect(result).to.have.property('grade');",
											"        pm.expect(result).to.have.property('is_visited');",
											"        pm.expect(result).to.have.property('mentor_id');",
											"        pm.expect(result).to.have.property('module_result');",
											"        pm.expect(result).to.have.property('no_of_student');",
											"        pm.expect(result).to.have.property('subject');",
											"        pm.expect(result).to.have.property('udise_code');",
											"        pm.expect(result).to.have.property('actor');",
											"        pm.expect(result).to.have.property('block');",
											"        pm.expect(result).to.have.property('created_at');",
											"        pm.expect(result).to.have.property('district');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/assessment-visit-results?id=0&limit=500",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"assessment-visit-results"
									],
									"query": [
										{
											"key": "id",
											"value": "0",
											"description": "last most id post which results are to be fetched"
										},
										{
											"key": "limit",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is a JSON object\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response has statusCode, message, and error properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('statusCode');",
											"    pm.expect(jsonData).to.have.property('message');",
											"    pm.expect(jsonData).to.have.property('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin-token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/assessment-visit-results?id=0&limit=500",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"assessment-visit-results"
									],
									"query": [
										{
											"key": "id",
											"value": "0",
											"description": "last most id post which results are to be fetched"
										},
										{
											"key": "limit",
											"value": "500"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://128.199.28.17:3000",
			"type": "string"
		},
		{
			"key": "user-service",
			"value": "http://128.199.28.17:8017",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiIzMjBiMDIwYS0zZDg0LTRkOGEtYTE5MS1kYTRlOTcyYzI5NTEiLCJleHAiOjE3Mzc4NzcyODcsImlhdCI6MTcwNjM0MTI4NywiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiI2NTFmMjZkYy0yMDgxLTQ3MmQtYjQ2YS02MDAwMWFkOTFiMDQiLCJqdGkiOiJkNzQ5NzMxOC1kNGVkLTQwYWItOTQxYi0yZDk1MDQ0NWFkMzIiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6Ijg2Njg3MjcwNTMiLCJhcHBsaWNhdGlvbklkIjoiMzIwYjAyMGEtM2Q4NC00ZDhhLWExOTEtZGE0ZTk3MmMyOTUxIiwicm9sZXMiOlsiT3BlblJvbGUiXSwic2lkIjoiODRlZTA2NjktMjUzMi00NDRmLWIzZDgtNzNiYzU5NTU1MzljIiwiYXV0aF90aW1lIjoxNzA2MzQxMjg3LCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiT3BlblJvbGUiLCJESUVUIiwibWFuYXZfc2FtcGFkYSJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJPcGVuUm9sZSIsIlgtSGFzdXJhLVVzZXItSWQiOiI4NjY4NzI3MDUzIn0sImFwaVJvbGVzIjpbIk9wZW5Sb2xlIl19.rUYkdz9HFt6beWgg8RKGsjJvtXwsFSSGyHvVHOisENKzJOhOBDneq8xMKwzZHw-v3olgJqDre8jfDqOTLav0S5kp5y2aI71GvL1SY5b1oDKhd7X_RrQ1XzOX4Xf1mMm_7trZOHWSRDQecKeojNDOXDGJLZ3uVymABH7XUUISthyQx_cOJo6woXgXKgaPs3oL9U94sbf9q49F3gloVFx2Yfa_EroD6R1lXIvrUMb0M4FTDEWRl7jmb6bVAEo6Oj1sBEL4-8AvJjPwIAUjL-gl6CT6_VqND47HDjhvpERyAcrNiElVKCixqTF50P58k09fya78mEeFkFNvsSEUdTpOSA",
			"type": "string"
		},
		{
			"key": "mentor_phone",
			"value": "9970821336",
			"type": "string"
		},
		{
			"key": "teacher_phone",
			"value": "8928295005",
			"type": "string"
		},
		{
			"key": "examiner_phone",
			"value": "8668727053",
			"type": "string"
		},
		{
			"key": "admin-token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRwSFNCOUYteGw5OGZLSnJ0LVEyVDV6UjQ3cyJ9.eyJhdWQiOiJjZDA4ZmJlMC1mYmU2LTQzYzktOGQ1Yy01YmJjMzNiYTBkOWMiLCJleHAiOjE3MDcyMDU1MzEsImlhdCI6MTcwNjM0MTUzMSwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyNmFhMDFlNi0wOTg0LTQyZDctYWM2MS1mNmQ1YWI3M2E0MmUiLCJqdGkiOiIzYzNmNDJkYi05MjgzLTQxMTktYTkyYS05NGI3MmNmODEzMGEiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvbnNvbGUtYWRtaW4iLCJhcHBsaWNhdGlvbklkIjoiY2QwOGZiZTAtZmJlNi00M2M5LThkNWMtNWJiYzMzYmEwZDljIiwicm9sZXMiOlsiQWRtaW4iXSwiYXV0aF90aW1lIjoxNzA2MzQxNTMxLCJ0aWQiOiIwMTA1NjZmZC1lMWNiLWM2NTgtYjY1OS1hMWQzZTA3MGJhYTgiLCJodHRwczovL2hhc3VyYS5pby9qd3QvY2xhaW1zIjp7IngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsiQWRtaW4iXSwieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoiQWRtaW4ifX0.gGBD-lF-neO383O-QKBmELp-XmCeY-AluCbBXtRCePnmomvAwl2Jop2PXzxEnSwgAZHnNsQqaL825ZpeEuDXFBX-4Hn9Ja_VufzvU-u61Lst9QRZOFI19NDgzj7kslQsSANrGI4Oo5hCWX8rSD9Hd9DIQwpBYS13-RtZbzosQ2Jf4ljv7dJntJjwRhbrW-CE_gYYtBC7NU1CTc_SAnH-Z45GhtiqoVBgZa0YG7EGvZYYuqF5g99C9Z2S5p9IBUBBZxxgnuOQFvfPVgh__fr4Wy4EthLsbsqw9Rp1xazcNWqave_NFzpCmOJ5C1hxNYhqEtKre9vEtXRCt2umz8cbIQ",
			"type": "string"
		},
		{
			"key": "admin-api-key",
			"value": "1WW61VevZkGwWweWNwlkvLSlbZ8Shx7Xtz6NJ6XFqTDtSuOje2jzW9A_",
			"type": "string"
		},
		{
			"key": "admin-user",
			"value": "console-admin",
			"type": "string"
		},
		{
			"key": "admin-password",
			"value": "Asdf@1234",
			"type": "string"
		},
		{
			"key": "admin-application-id",
			"value": "cd08fbe0-fbe6-43c9-8d5c-5bbc33ba0d9c",
			"type": "string"
		},
		{
			"key": "roll_no",
			"value": "",
			"type": "string"
		},
		{
			"key": "unique_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "dataBaseUrl",
			"value": "103.154.251.109:8000",
			"type": "string"
		}
	]
}